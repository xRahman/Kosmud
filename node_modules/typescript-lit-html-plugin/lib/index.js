"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Original code forked from https://github.com/Quramy/ts-graphql-plugin
var api_1 = require("typescript-styled-plugin/lib/api");
var typescript_template_language_service_decorator_1 = require("typescript-template-language-service-decorator");
var vscode_html_languageservice_1 = require("vscode-html-languageservice");
var config_1 = require("./config");
var configuration_1 = require("./configuration");
var html_template_language_service_1 = require("./html-template-language-service");
var substitutions_1 = require("./substitutions");
var virtual_document_provider_1 = require("./virtual-document-provider");
var LanguageServiceLogger = /** @class */ (function () {
    function LanguageServiceLogger(info) {
        this.info = info;
    }
    LanguageServiceLogger.prototype.log = function (msg) {
        this.info.project.projectService.logger.info("[" + config_1.pluginName + "] " + msg);
    };
    return LanguageServiceLogger;
}());
var HtmlPlugin = /** @class */ (function () {
    function HtmlPlugin(_typescript) {
        this._typescript = _typescript;
        this._virtualDocumentProvider = new virtual_document_provider_1.VirtualDocumentProvider();
    }
    HtmlPlugin.prototype.create = function (info) {
        var logger = new LanguageServiceLogger(info);
        var config = configuration_1.loadConfiguration(info.config);
        logger.log('config: ' + JSON.stringify(config));
        var styledLanguageService = new api_1.StyledTemplateLanguageService(this._typescript, {}, new virtual_document_provider_1.CssDocumentProvider(this.htmlLanguageService), logger);
        var htmlTemplateLanguageService = new html_template_language_service_1.default(this._typescript, config, this._virtualDocumentProvider, this.htmlLanguageService, styledLanguageService, logger);
        return typescript_template_language_service_decorator_1.decorateWithTemplateLanguageService(this._typescript, info.languageService, info.project, htmlTemplateLanguageService, this.getTemplateSettings(config, this._virtualDocumentProvider), { logger: logger });
    };
    Object.defineProperty(HtmlPlugin.prototype, "htmlLanguageService", {
        get: function () {
            if (!this._htmlLanguageService) {
                this._htmlLanguageService = vscode_html_languageservice_1.getLanguageService();
            }
            return this._htmlLanguageService;
        },
        enumerable: true,
        configurable: true
    });
    HtmlPlugin.prototype.getTemplateSettings = function (config, provider) {
        var _this = this;
        return {
            tags: config.tags,
            enableForStringWithSubstitutions: true,
            getSubstitutions: function (templateString, spans) {
                return substitutions_1.getSubstitutions(_this._typescript, _this.htmlLanguageService, provider, templateString, spans);
            },
        };
    };
    return HtmlPlugin;
}());
module.exports = function (mod) {
    return new HtmlPlugin(mod.typescript);
};
//# sourceMappingURL=index.js.map