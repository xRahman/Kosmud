"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var api_1 = require("typescript-styled-plugin/lib/api");
var embeddedSupport_1 = require("./embeddedSupport");
var NoopTemplateContext = /** @class */ (function () {
    function NoopTemplateContext(typescript, text) {
        this.typescript = typescript;
        this.text = text;
        this.fileName = 'x.css';
        this.rawText = text;
    }
    Object.defineProperty(NoopTemplateContext.prototype, "node", {
        get: function () {
            throw new Error('Not supported');
        },
        enumerable: true,
        configurable: true
    });
    NoopTemplateContext.prototype.toOffset = function (location) {
        var line = 0;
        var character = 0;
        for (var offset = 0;; ++offset) {
            if (line >= location.line && character >= location.character) {
                return offset;
            }
            if (this.text[offset] === '\n') {
                ++line;
                character = 0;
            }
            else {
                ++character;
            }
        }
    };
    NoopTemplateContext.prototype.toPosition = function (offset) {
        var line = 0;
        var character = 0;
        for (var i = 0; i < offset; ++i) {
            if (this.text[i] === '\n') {
                ++line;
                character = 0;
            }
            else {
                ++character;
            }
        }
        return { line: line, character: character };
    };
    return NoopTemplateContext;
}());
function getSubstitutions(typescript, languageService, documentProvider, templateString, spans) {
    var virtualDoc = documentProvider.createVirtualDocument(new NoopTemplateContext(typescript, templateString));
    var regions = embeddedSupport_1.getDocumentRegions(languageService, virtualDoc);
    var cssSpans = spans
        .map(function (span) { return ({ language: regions.getLanguageAtPosition(virtualDoc.positionAt(span.start)), span: span }); })
        .filter(function (x) { return x.language === 'css'; })
        .map(function (x) { return x.span; });
    var settings = api_1.getTemplateSettings({});
    return settings.getSubstitutions(templateString, cssSpans);
}
exports.getSubstitutions = getSubstitutions;
//# sourceMappingURL=substitutions.js.map