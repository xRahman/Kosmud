"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Original code forked from https://github.com/Quramy/ts-graphql-plugin
Object.defineProperty(exports, "__esModule", { value: true });
var vscode = require("vscode-languageserver-types");
var embeddedSupport_1 = require("./embeddedSupport");
var emptyCompletionList = {
    isIncomplete: false,
    items: [],
};
var CompletionsCache = /** @class */ (function () {
    function CompletionsCache() {
    }
    CompletionsCache.prototype.getCached = function (context, position) {
        if (this._completions
            && context.fileName === this._cachedCompletionsFile
            && this._cachedCompletionsPosition && arePositionsEqual(position, this._cachedCompletionsPosition)
            && context.text === this._cachedCompletionsContent) {
            return this._completions;
        }
        return undefined;
    };
    CompletionsCache.prototype.updateCached = function (context, position, completions) {
        this._cachedCompletionsFile = context.fileName;
        this._cachedCompletionsPosition = position;
        this._cachedCompletionsContent = context.text;
        this._completions = completions;
    };
    return CompletionsCache;
}());
var HtmlTemplateLanguageService = /** @class */ (function () {
    function HtmlTemplateLanguageService(typescript, configuration, virtualDocumentProvider, htmlLanguageService, styledLanguageService, _logger // tslint:disable-line
    ) {
        this.typescript = typescript;
        this.configuration = configuration;
        this.virtualDocumentProvider = virtualDocumentProvider;
        this.htmlLanguageService = htmlLanguageService;
        this.styledLanguageService = styledLanguageService;
        this._logger = _logger;
        this._completionsCache = new CompletionsCache();
    }
    HtmlTemplateLanguageService.prototype.getCompletionsAtPosition = function (context, position) {
        var entry = this.getCompletionItems(context, position);
        if (entry.type === 'styled') {
            return entry.value;
        }
        return translateCompletionItemsToCompletionInfo(this.typescript, entry.value);
    };
    HtmlTemplateLanguageService.prototype.getCompletionEntryDetails = function (context, position, name) {
        var entry = this.getCompletionItems(context, position);
        if (entry.type === 'styled') {
            return this.styledLanguageService.getCompletionEntryDetails(context, position, name);
        }
        var item = entry.value.items.find(function (x) { return x.label === name; });
        if (!item) {
            return {
                name: name,
                kind: this.typescript.ScriptElementKind.unknown,
                kindModifiers: '',
                tags: [],
                displayParts: toDisplayParts(name),
                documentation: [],
            };
        }
        return translateCompletionItemsToCompletionEntryDetails(this.typescript, item);
    };
    HtmlTemplateLanguageService.prototype.getQuickInfoAtPosition = function (context, position) {
        var document = this.virtualDocumentProvider.createVirtualDocument(context);
        var documentRegions = embeddedSupport_1.getDocumentRegions(this.htmlLanguageService, document);
        var languageId = documentRegions.getLanguageAtPosition(position);
        switch (languageId) {
            case 'html':
                var htmlDoc = this.htmlLanguageService.parseHTMLDocument(document);
                var hover = this.htmlLanguageService.doHover(document, position, htmlDoc);
                return this.translateHover(hover, position, context);
            case 'css':
                return this.styledLanguageService.getQuickInfoAtPosition(context, position);
        }
        return undefined;
    };
    HtmlTemplateLanguageService.prototype.getFormattingEditsForRange = function (context, start, end, settings) {
        var _this = this;
        if (!this.configuration.format.enabled) {
            return [];
        }
        // Disable formatting for blocks that contain a style tag
        //
        // Formatting styled blocks gets complex since we want to preserve interpolations inside the output
        // but we can't format content with `{` property.
        // The best fix would be to add `style` to `contentUnformatted` but
        // https://github.com/Microsoft/vscode-html-languageservice/issues/29 is causing problems and I'm not sure how
        // to work around it well
        if (context.text.match(/<style/g)) {
            return [];
        }
        var document = this.virtualDocumentProvider.createVirtualDocument(context);
        // Make sure we don't get rid of leading newline
        var leading = context.text.match(/^\s*\n/);
        if (leading) {
            start += leading[0].length;
        }
        // or any trailing newlines
        var trailing = context.text.match(/\n\s*$/);
        if (trailing) {
            end -= trailing[0].length;
        }
        if (end <= start) {
            return [];
        }
        var range = this.toVsRange(context, start, end);
        var edits = this.htmlLanguageService.format(document, range, {
            tabSize: settings.tabSize,
            insertSpaces: !!settings.convertTabsToSpaces,
            wrapLineLength: 120,
            unformatted: '',
            contentUnformatted: 'pre,code,textarea',
            indentInnerHtml: false,
            preserveNewLines: true,
            maxPreserveNewLines: null,
            indentHandlebars: false,
            endWithNewline: false,
            extraLiners: 'head, body, /html',
            wrapAttributes: 'auto',
        });
        return edits.map(function (vsedit) {
            return {
                span: _this.toTsSpan(context, vsedit.range),
                newText: vsedit.newText,
            };
        });
    };
    HtmlTemplateLanguageService.prototype.getSignatureHelpItemsAtPosition = function (_context, _position) {
        // Html does not support sig help
        return undefined;
    };
    HtmlTemplateLanguageService.prototype.getOutliningSpans = function (context) {
        var _this = this;
        var document = this.virtualDocumentProvider.createVirtualDocument(context);
        var ranges = this.htmlLanguageService.getFoldingRanges(document);
        return ranges.map(function (range) { return _this.translateOutliningSpan(context, range); });
    };
    HtmlTemplateLanguageService.prototype.getSemanticDiagnostics = function (context) {
        return this.styledLanguageService.getSemanticDiagnostics(context);
    };
    HtmlTemplateLanguageService.prototype.getSupportedCodeFixes = function () {
        return this.styledLanguageService.getSupportedCodeFixes();
    };
    HtmlTemplateLanguageService.prototype.getCodeFixesAtPosition = function (context, start, end, errorCodes, format) {
        return this.styledLanguageService.getCodeFixesAtPosition(context, start, end, errorCodes, format);
    };
    HtmlTemplateLanguageService.prototype.toVsRange = function (context, start, end) {
        return {
            start: context.toPosition(start),
            end: context.toPosition(end),
        };
    };
    HtmlTemplateLanguageService.prototype.toTsSpan = function (context, range) {
        var editStart = context.toOffset(range.start);
        var editEnd = context.toOffset(range.end);
        return {
            start: editStart,
            length: editEnd - editStart,
        };
    };
    HtmlTemplateLanguageService.prototype.getCompletionItems = function (context, position) {
        var cached = this._completionsCache.getCached(context, position);
        if (cached) {
            return cached;
        }
        var document = this.virtualDocumentProvider.createVirtualDocument(context);
        var documentRegions = embeddedSupport_1.getDocumentRegions(this.htmlLanguageService, document);
        var languageId = documentRegions.getLanguageAtPosition(position);
        switch (languageId) {
            case 'html':
                {
                    var htmlDoc = this.htmlLanguageService.parseHTMLDocument(document);
                    var htmlCompletions = {
                        type: 'html',
                        value: this.htmlLanguageService.doComplete(document, position, htmlDoc) || emptyCompletionList,
                    };
                    this._completionsCache.updateCached(context, position, htmlCompletions);
                    return htmlCompletions;
                }
            case 'css':
                {
                    var styledCompletions = {
                        type: 'styled',
                        value: this.styledLanguageService.getCompletionsAtPosition(context, position),
                    };
                    this._completionsCache.updateCached(context, position, styledCompletions);
                    return styledCompletions;
                }
        }
        var completions = {
            type: 'html',
            value: emptyCompletionList,
        };
        this._completionsCache.updateCached(context, position, completions);
        return completions;
    };
    HtmlTemplateLanguageService.prototype.translateHover = function (hover, position, context) {
        var header = [];
        var docs = [];
        var convertPart = function (hoverContents) {
            if (typeof hoverContents === 'string') {
                docs.push({ kind: 'unknown', text: hoverContents });
            }
            else if (Array.isArray(hoverContents)) {
                hoverContents.forEach(convertPart);
            }
            else {
                header.push({ kind: 'unknown', text: hoverContents.value });
            }
        };
        convertPart(hover.contents);
        var start = context.toOffset(hover.range ? hover.range.start : position);
        return {
            kind: this.typescript.ScriptElementKind.string,
            kindModifiers: '',
            textSpan: {
                start: start,
                length: hover.range ? context.toOffset(hover.range.end) - start : 1,
            },
            displayParts: header,
            documentation: docs,
            tags: [],
        };
    };
    HtmlTemplateLanguageService.prototype.translateOutliningSpan = function (context, range) {
        var startOffset = context.toOffset({ line: range.startLine, character: range.startCharacter || 0 });
        var endOffset = context.toOffset({ line: range.endLine, character: range.endCharacter || 0 });
        var span = {
            start: startOffset,
            length: endOffset - startOffset,
        };
        return {
            autoCollapse: false,
            kind: this.typescript.OutliningSpanKind.Code,
            bannerText: '',
            textSpan: span,
            hintSpan: span,
        };
    };
    return HtmlTemplateLanguageService;
}());
exports.default = HtmlTemplateLanguageService;
function translateCompletionItemsToCompletionInfo(typescript, items) {
    return {
        isGlobalCompletion: false,
        isMemberCompletion: false,
        isNewIdentifierLocation: false,
        entries: items.items.map(function (x) { return translateCompetionEntry(typescript, x); }),
    };
}
function translateCompletionItemsToCompletionEntryDetails(typescript, item) {
    return {
        name: item.label,
        kindModifiers: 'declare',
        kind: item.kind ? translateionCompletionItemKind(typescript, item.kind) : typescript.ScriptElementKind.unknown,
        displayParts: toDisplayParts(item.detail),
        documentation: toDisplayParts(item.documentation),
        tags: [],
    };
}
function translateCompetionEntry(typescript, item) {
    return {
        name: item.label,
        kindModifiers: '',
        kind: item.kind ? translateionCompletionItemKind(typescript, item.kind) : typescript.ScriptElementKind.unknown,
        sortText: '0',
    };
}
function translateionCompletionItemKind(typescript, kind) {
    switch (kind) {
        case vscode.CompletionItemKind.Method:
            return typescript.ScriptElementKind.memberFunctionElement;
        case vscode.CompletionItemKind.Function:
            return typescript.ScriptElementKind.functionElement;
        case vscode.CompletionItemKind.Constructor:
            return typescript.ScriptElementKind.constructorImplementationElement;
        case vscode.CompletionItemKind.Field:
        case vscode.CompletionItemKind.Variable:
            return typescript.ScriptElementKind.variableElement;
        case vscode.CompletionItemKind.Class:
            return typescript.ScriptElementKind.classElement;
        case vscode.CompletionItemKind.Interface:
            return typescript.ScriptElementKind.interfaceElement;
        case vscode.CompletionItemKind.Module:
            return typescript.ScriptElementKind.moduleElement;
        case vscode.CompletionItemKind.Property:
            return typescript.ScriptElementKind.memberVariableElement;
        case vscode.CompletionItemKind.Unit:
        case vscode.CompletionItemKind.Value:
            return typescript.ScriptElementKind.constElement;
        case vscode.CompletionItemKind.Enum:
            return typescript.ScriptElementKind.enumElement;
        case vscode.CompletionItemKind.Keyword:
            return typescript.ScriptElementKind.keyword;
        case vscode.CompletionItemKind.Color:
            return typescript.ScriptElementKind.constElement;
        case vscode.CompletionItemKind.Reference:
            return typescript.ScriptElementKind.alias;
        case vscode.CompletionItemKind.File:
            return typescript.ScriptElementKind.moduleElement;
        case vscode.CompletionItemKind.Snippet:
        case vscode.CompletionItemKind.Text:
        default:
            return typescript.ScriptElementKind.unknown;
    }
}
function toDisplayParts(text) {
    if (!text) {
        return [];
    }
    return [{
            kind: 'text',
            text: typeof text === 'string' ? text : text.value,
        }];
}
function arePositionsEqual(left, right) {
    return left.line === right.line && left.character === right.character;
}
//# sourceMappingURL=html-template-language-service.js.map