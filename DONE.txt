

ERROR()
--------

Pokud nechám ERROR(), asi by se dalo použít tohle:
https://www.bennadel.com/blog/2828-creating-custom-error-objects-in-node-js-with-error-capturestacktrace.htm

  In the V8 engine, the stacktrace of an error is gathered using the
  Error.captureStackTrace() method:

    Error.captureStackTrace( errorObject, localContextFunction )

  This method injects a "stack" property into the first argument and,
  optionally, excludes the localContextFunction from the stacktrace.
  So, for example, if we were to generate the stacktrace inside of an
  error Factory function, we could tell V8 to exclude the factory function
  when generating the stack. This would reduce the noise of the error
  implementation and confine the stacktrace to meaningful information
  about the error context.

[done]

TODO: Otestovat reportování errorů.
[done]

TODO: Vyzkoušet ERROR() a REPORT() i na klientu.
[done]

TODO: Někde v kódu mám RERORT(new Error("test"));
- už snad ne
[done]

TODO: Reportování errorů a exceptionů je pořád divný.
- snad fixed
[done]

TODO: Odstranit testovací kód na ERROR() a REPORT() ze serveru a z klienta.
[done]

TODO: Když se stejně nakonec na zobrazení errorů volá Syslog,
  nebylo by lepší udělat polymorfní jen ten, místo Application?
  - respektive neprovolávat ty reporting funkce přes Application.
    (Tam to moc nepatří).
  - application je zatím taky singleton, možná to bude potřeba
[done]

TODO: Asi jsem rozbil tikání physics enginu a posílání updatů.
- to bylo nejspíš tím, že mi utekla uncaught exception. Client
  se tím zřejmě taky zastaví.
[done]

TODO: Updatnout commenty v ERROR (a vůbec v celém reportovacím kódu).
[done]

TODO: Z Utils oddělit ještě FileUtils.
[done]

TODO: FATAL_ERROR() by neměl bejt v Shared kódu (na klientu nedává smysl).
  A možná by šel vyhodit úplně.
- zrušen kompletně
[done]

TODO: Extra házení EXCEPTION_CAUGHT možná není úplně dobrý, protože tam
  není uvedeno, jaká exception byla chycena. Asi by to fakt měl bejt jeden
  message.
[done]

TODO: Mrknout ještě na REPORT() a logování catch message.
[done]

TODO: Testnout additional message u RERPORT().
[done]

TODO: Funkce ze StringUtils by se měly volat jak StringUtils.něco
  (ať je jasný, že to je z externího modulu).
[done]

TODO: Otestovat, jestli getTrimmedStackTrace() správně trimuje stack trace.
- otestováno při hození erroru.
- Klient to nepoužívá, hází místo toho exception.
[done]

TODO: Zvážit, jestli úplně nezrušit ERROR a nenechat jen syslog.
- Nakonec ne, viz třeba ClientSocket. Entry point funkce rovnou reportují,
  nemá smysl, aby házely exception.
[done]

TODO: Nahradit fs-promise něčím jiným
  npm WARN deprecated fs-promise@2.0.3: Use mz or fs-extra^3.0 with Promise Support
[done]

TODO: Everything is brutally slow now. Need to investigate what has happened.
  (fs-extra probably causes this).
- never mind, it works fine.
[done]

TODO: Serializable by nemělo nic vědět o entitách.
  - Entity by si měly přetížit metodu na serializaci/deserializaci properties.
- Nakonec jsem deserializování referencí na entity nechal v Serializable,
  aby šly házet reference na entity do non-entity class (a serializovat je
  jako reference).
[won't do]

Ok, seriózní TODO: Zprovoznit pohyb lodě tak, že na serveru to bude physics
  body v matter.js a na klienta se bude posílat aktuální pozice a rotace.
- importnout na serveru Matter.js
  [done]
- vytvořit testovací body pro ship
  [done]
- nasimulovat wsad (speed, rotation, position).
  (Zatím nic moc, ale tohle teď skipnu, s tím si bude lepší hrát s vizuální
   odezvou.)
- ukrást websockety z BrutusNext
[done]
- ukrást Serializable z BrutusNext
[done]
- posílat pozici a rotaci a zobrazovat to na klientu.
[done]
- posílat keyboard eventy (nejspíš už přeložené na herní akce?)
[done]

TODO: Velocity vector se musí updatovat spolu s rotací lodě.
- pamatovat si velocity (scalar value) starnou a velocity vector
  z ní počítat každej update().
[done]

TODO: Hodit funkce na práci s typy z Utils do Types.
[done]

TODO: Uklidit v Serializable public, protected atd.
[done]

TODO: Updatnout úvodní pokec v Serializable.
[done]

TODO: Vrátit se k jednoduchému modelu shared-only a data-only packetů
  a processPacket() udělat jako externí kód se switchem na className packetu.
- Zrušit Server/Protocol a Client/Protocol
- Zrušit IncomingPacket a OutgoingPacket.
- Classy XXXData přejmenovat na XXX.
- napsat processPacket() na serveru.
- napsat processPacket() na klientu.
[abandoned, reverted]

TODO: Vyhodit z gitu zkompilovaný kód.
[done]

TODO: Přejmenovat adresáře Client/js, Server/js, atd. (na CamelCase)
[done]

TODO: Objekty ve scéně by měly být v classe, která se celá
  nainstancuje ve Scene.create(), ať nemusím testovat, jestli to existuje.
  - problém je, že některé věci se vyrábí v preloadu...
    Preload s konkrétními sprity nesouvisí - z jedné textury se dá vyrobit
    milión lodí. 
[done]