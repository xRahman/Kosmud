TODO: Přejmenovat adresáře Client/js, Server/js, atd. (na CamelCase)

TODO: Zamyslet se, jestli by se nedaly enumy nahradit stringama
- na druhou stranu by se pak posílalo o dost víc dat po síti, což
  asi nechci. Takže v případě paketů zůstanu raději u enumů.
  (Na druhou stranu u stringových typů šlo nějak zajistit, že jsem
   vyčerpal všechny možnosti - to je fajn.)

TODO: Zjistit, co mi to tam chodí za system message.

TODO: Asi sloučit classy Client a KosmudClient, Server a KosmudServer.

TODO: Serializable by nemělo nic vědět o entitách.

TODO: Klikání na objekty ve hře:
  You could do this using Query.point giving a mouse position and
  Composite.allBodies(engine.world). This will give you a list of
  bodies under the mouse.

Ok, seriózní TODO: Zprovoznit pohyb lodě tak, že na serveru to bude physics
  body v matter.js a na klienta se bude posílat aktuální pozice a rotace.
- importnout na serveru Matter.js
  [done]
- vytvořit testovací body pro ship
  [done]
- nasimulovat wsad (speed, rotation, position).
  (Zatím nic moc, ale tohle teď skipnu, s tím si bude lepší hrát s vizuální
   odezvou.)
- ukrást websockety z BrutusNext
[done]
- ukrást Serializable z BrutusNext
[done]
- posílat pozici a rotaci a zobrazovat to na klientu.
- posílat keyboard eventy (nejspíš už přeložené na herní akce?)


npm install --save @types/matter-js


Note that Matter.Runner is not yet supported in nodejs, so you'll need your own game loop.

      var Matter = require('matter-js/build/matter.js');

      var engine = Matter.Engine.create();

      var boxA = Matter.Bodies.rectangle(400, 200, 80, 80);
      var boxB = Matter.Bodies.rectangle(450, 50, 80, 80);
      var ground = Matter.Bodies.rectangle(400, 610, 810, 60, { isStatic: true });

      Matter.World.add(engine.world, [boxA, boxB, ground]);

      console.log('boxA', boxA.position);
      console.log('boxB', boxB.position);

      for (var i = 0; i < 100; i++) {
          Matter.Events.trigger(engine, 'tick', { timestamp: engine.timing.timestamp });
          Matter.Engine.update(engine, engine.timing.delta);
          Matter.Events.trigger(engine, 'afterTick', { timestamp: engine.timing.timestamp });
      }

      console.log('boxA', boxA.position);
      console.log('boxB', boxB.position);





https://github.com/Lightnet/project-phaser3-matterjs
https://gamedevacademy.org/phaser-3-tutorial/
https://github.com/liabru/matter-js/wiki/Tutorials
http://docs.lance.gg/r3.0.0/tutorial-spaceships.html
tilemapy a matter.js: https://www.mikewesthad.com/blog.html
---

TODO: Objekty ve scéně by měly být v classe, která se celá
  nainstancuje ve Scene.create(), ať nemusím testovat, jestli to existuje.
  - problém je, že některé věci se vyrábí v preloadu...
    Preload s konkrétními sprity nesouvisí - z jedné textury se dá vyrobit
    milión lodí. 

TODO: Prostudovat avanced Typescript typy:
  https://levelup.gitconnected.com/advanced-typescript-types-with-examples-1d144e4eda9e
- nebo si to možná hodit do nějakého typescriptového howtu či manuálu.

TODO: Mrknout na:
  var game = new Phaser.Game("100%", "100%", Phaser.CANVAS, 'parent');
  ...
  game.scale.scaleMode = Phaser.ScaleManager.RESIZE
https://stackoverflow.com/questions/28227090/phaser-make-background-screen-width-instead-of-content-width



TODO: Nahradit fs-promise něčím jiným
  npm WARN deprecated fs-promise@2.0.3: Use mz or fs-extra^3.0 with Promise Support


TODO: Updatovat verzi tasks.json (budu to muset celý předělat...)

TODO: Zkontrolovat, že http server neservuje soubory mimo www-root.

TODO: Vyzkoušet ES6 moduly v browseru.
https://medium.com/dev-channel/es6-modules-in-chrome-canary-m60-ba588dfb8ab7
   <script type="module" src="module.js"></script>
- nefungují, protože browser vyžaduje v importech '.js' a typescript
  ho tam se zapnutým outputem "module": "es2015" nedává.
  viz https://github.com/Microsoft/TypeScript/issues/16577