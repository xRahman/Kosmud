TODO: Sledovat moji issue v animated tiles pluginu:
  https://github.com/nkholski/phaser-animated-tiles/issues/3

TODO: Sledovat moji issue v typescript Box2d:
  https://github.com/flyover/box2d.ts/issues/50

TODO: Sledovat opravu https://github.com/photonstorm/phaser/pull/3964
  (momentálně mám hacknutou client-side opravu v 'up: function (event, time)').
  https://github.com/photonstorm/phaser/issues/3779

-----------------------


TODO: Prozkoumat private (a možná protected) konstruktory.
- mělo by to fungovat tak, že class pak jde vyrobit pouze statickou
  factory metodou (která si samozřejmě vezme isntanci z ClassFactory).
- Hmm, to by pak mohlo fungovat tak, že všechny dynamické classy budou
  mít prostě metodu newInstance().
TODO: Pak je ještě jedna možnost - že by konstruktory fungovaly jako
  factory funkce (protože konstruktor v zásadě asi může vrátit co chce).
  - constructor by asi class factory passnul this, takže by ho mohla
    využít jako root prototyp, pokud by ho ještě neměla. Díky tomu by
    možná dokonce vůbec nebyla potřeba registrace.

ÚVAHA: Psát si vyráběcí funkci na každou blbost je asi zbytečná spousta
  kódu.
TODO: Assets.newXYAsset() předělat na nějakou společnou funkci.
- Entities.newRootEntity(TextureAsset, name);
  (Name dát jako optional parametr. Nebo možná dokonce required).

ÚVAHA: Několikrát jsem narazil na problém, že potomci mají stejnou
  property (třeba player), ale potřebují pracovat s client nebo server
  verzí.
- možná by shared classa mohla bejt generic s tím, že si potomci
  za T dosaděj příslušnej typ...
  (nemusel bych pak možná přetěžovat metody a tak).
TODO: Vyzkoušet to a pokud to bude fungovat, tak to použít.
- Vyzkoušel jsem to u Connection a zdá se, že to funguje.
[done]
TODO: Udělat to i o statních class

Short descy na začátku souborů jsou asi naprd - typicky nevím,
 co tam psát, takže tam píšu redundantní věci
 (třeba to, že je packet součástí prototcolu je daný už tím, že je v adresáři
  protocol).
TODO: Smazat všechny short descy na začátku souborů
  (nechat tam asi jen "Part of KOSMUD").

TODO: Setovat playera do Client/Connection (v LoginResponse.process()).

TODO: LoginResponse neexistoval - přidělal jsem shared verzi, ale ještě
  bude potřeba client verze, kde se bude processit.


TODO: Projít všechny packety a při setování entity do packetu
  je přidávat do .entities v packetu.

TODO: Místo "throw new Error()" používat "throw Error()";

TODO: Udělat to tak, že zóna v loadAssets projde do sebe vnořené entity
  a ty projdou svoje assety.

Ok, takže jinak.
TODO: 1) Dočasně to hacknout, abych při přidání lodě do zóny nemusel
  řešit assety (ať můžu vyzkoušet savování zóny s contentem).
- HACKnuto v Shared/Zone.addShip().
[done]
TODO: Nakonec zase odhackovat.

TODO: Posílat account na klient
- asi ho dát do Connection (ať je to stejně jako na serveru).

TODO: Nakonec zase rozchodit lítání do původního stavu.


TODO: Výhledově pořešit savování/loadování pozice a rotace lodě.
  (pokud se savují accessory, tak by to šlo vytahovat z physicsBody getterem).

TODO: Výhledově zvážit, jestli místo prototypeId nemít rovnou referenci
  na prototyp.
- asi by bylo trochu míň přehledný save fily (i když ne nějak závratně),
  ale líp by se s tím nejspíš pracovalo.
Na druhou stranu na prototyp se nejspíš dostanu přes standardní prototype
  chain, takže asi nepotřebuju extra referenci.
  (můžu na to udělat metodu getPrototype()).


Problém: Nemůžu přidávat ship do zóny, dokud nemá initnutý assety
- hmm, jenže v tý době ještě nejsou nasetovaný.
  Takže možná initovat každej aset ve chvíli, kdy ho do zóny setnu?
  - jasně, ve skutečnosti musím přidávat assety do zóny, když přidávám
    něco, co je vyžaduje :-)
TODO: Při přidávání lodi do zóny přidat do zóny assety vyžadované lodí.

Assets se mi v zóně nesavujou, protože nejsou setnuté do instance,
  ale do prototypu.
  - savovat se každopádně assets maj, byť teda trochu jinak.
TODO: Zrušit assets z prototypu Zóny a nasetovat je do savu test zóny.

TODO: vyrobit do zóny ship
  (asi taky jednorázově)

TODO: savnout zónu i s lodí (celé contents) do jednoho souboru.

TODO: implementovat serializaci/deserializaci entities v packetu.

TODO: posílat loď jako součást packetu (EnterFlightResponse).
  - upravit kód, aby se data lodi četla přímo

TODO: Až se budou posílat entity v packetech, tak pořešit
  posílání properties v zóně (tuším, že tilemapy a tak se zatím
  předávají přes statickou property nebo tak nějak).

-----------------------

Logovací procedura
1) akceptnutí connection (vytvoří se Connection).
2) klient pošle LoginRequest (login, heslo)
   - jakmile player zadá login a heslo, ale můžu to poslat i hned
     po připojení (jako simulaci toho, že má player savnutý private key,
     nebo tak něco).
3) Loadne nebo vyrobí se account (pokud je login ok), pošle se na
   klienta (LoginResponse).
   - stav se switchne asi do lobby nebo tak (charselect už nebude).
     Teď to asi můžu házet rovnou do flightu.


TODO: Vyrábět testovací ship jako novou entitu.
- zatím asi v každém startu s novým idčkem
- časem ji savovat a loadovat.


-----------------------

TODO:
1) Zkusit předělat Classes na Object.create()
   - funguje
2) Implementovat Entity.
3) Implementovat Entities (nebo to sloučit s Classes)
4) .entities do Packetu.
5) Posílání entities na klienta
6) Savování/loadování entitit
7) Savování/loadování celé zóny do jednoho souboru.

IDEA: Do packetů dát .contents, nebo možná .entities a přetížit
  serializaci/deserializaci tak, že všechny .entities projde
  a automaticky serializuje/deserializuje (podobně jako .contents
  u ContainerEntity).
- packet při tom může mít na tyhle entity ještě extra odkazy, ty
  se pak serializujou jako reference (a tudíž se při deserializaci
  automaticky obnověj).

TODO: Že bych nakonec všechny dynamické classy vyráběl přes Object.create()
  místo přes new?
- znamenalo by to, že při registraci classy by se nesavoval konstruktor, ale
  rovnou instance - a z ní by se pak dělali potomci přes Object.create().
Výhodu by to mělo, že by bylo průlhlednější (ne)volání konstruktoru.
  Při vyrábění té prototypové instance by se konstruktor normálně volal
  (což se teď neděje, když volám new na uložený konstruktor), protože by
  ho zavolal ten, kdo by prototypovou instanci registroval.
    A při factory create už by se samozřejmě konstruktor nevolal.

IMPORTANT: Určitě neřešit unikátnost jmen v entitách, tím jsem si v BNext
  pekelně zkomplikoval už tak dost složitej kód.
- entity prostě mají name a nějaký externí přidělovač zajistí, že budou
  unikátní (tzn. nejdřív si řeknu o jméno a až pak pod ním vyrobím entitu).

-----------------------

TODO: Tak přece jen budu muset ještě hrabat do arrive()
- při kliku kousek od lodi se mi občas točí jak čamrda
  (při krátké vzdálenosti od cíle bych neměl updatovat direction waypointu)
- asi bych měl přece jen povolit přetáčení, tzn. směr ne přímo k waypointu,
  ale ke steering force.
  - a asi tak, že to lineárně interpoluju podle vzdálenosti, takže
    když budu hodně blízko cíli, tak budu vždycky směřovat k němu a když dál,
    tak někde mezi směr na cíl a na desired force.
    (interpolaci nejspíš vůči braking distance).

------------------------------------------------------------

TODO: Zkontrolovat zvuk exhaustů
- nevím, jestli mi funguje hlasitost
- a asi by se neměla přehrávat celá smyčka, ale jen část.

TODO: Odhackovat Shared.Zone.getPlayerShip()
  (to asi budu řešit až když se budou posílat entity).

TODO: ShipVectors kreslí i kruhy a tak, asi by se to mělo jmenovat jinak
  (ShipDebugGraphics?)


-----

Zprovoznit entity
- Savovat/loadovat lodě z disku.
- Savovat/loadovat zónu z disku.
- Posílat v rámci packetů zónu/lodě místo ručně vytažených properties.
  (ZoneUpdate se asi bude muset pořád vyrábět ručně, uvidíme...)
- Udělat entity pro textury, zvuky, shapy a podobně
  - používat idčko entity jako idčko resourcu v Phaseru.




Upřesnění aktuálního cíle:
---------------------------
- 1 player ship, 1 enemy ship
- střelba railgunem a raketama
  - zvukové efekty
  - exploze při zásazích, exploze při zničení lodi
  - grafika a fyzika vraku
- basic interface (healthbar, skillbar, zobrazení cooldownu na rakety).
  (na to asi budu muset rozběhat windows a vůbec základy gui).
- detekce zásahů, detekce kolizí lodí. Basic počítání hpček.
(překážky, tedy obecně objekty ve scéně, na tohle nejsou potřeba)


TODO: V rámci EnterFlightRequest.sendResponse() posílat
  zónu (respektive to z ní, co player vidí. A hlavně seznam
  toho, co se má preloadnout).
  - zatím to dělat nebudu a budu číst data zóny natvrdo.

TODO: V Client/EnterFlightRequest.process() creatnout zónu z poslaných dat
  (zatím ji tam budu natvrdo vyrábět).


TODO: Pokud nebudou potřeba data tilemapy po načtení shapů, tak je
  nedržet (tj. dát to do dočasné proměnné).
  (tzn. Zone.tilemaps by asi mělo být dočasné a ne class property)
- shapy v paměti držet budu.

TODO: V EnterShip.fakeLoadFighter() setovat i ostatní physics properties.
  (ve Vehicle budou jen defaultní).


Obecně se mi nechce dělat classy pro jednotlivé typy lodí.
- různou funkčnost zařídím prostě tak, že do nich dám různé zbraňové systémy,
  každý se svou funkčností.
=> Jednotlivé lodě musej bejt instance s různě nastavenými vlastnostmi.
  - to v zásadě můžu udělat i v kódu, prostě udělám 4x new Ship() a nasetuju
    jim properties (efektivně to je totéž jako load entity z disku).
{tohle si tu nechám, ať vím, kam směřuju}



Far TODO:
----------
3) Dát něco do scény.
4) Vyhýbání (překážkám a jiným lodím).
7) Bullets (railgun a tak)
8) Rakety!
9) Lag simulátor a interpolace na clientu, aby se to netrhalo.
   - zatím asi až tak moc nespěchá, hratelný to bude i bez toho.

-----------------------------------------------------------------------


Prozatímní řešení client-server predikce
-----------------------------------------

TODO: Napsat "simulátor lagu"
  (random setInterval() před posláním packetu).

TODO: Na klienta posílat nejen aktuální stav, ale i rychlost a rotaci.
  Klient bude pokračovat v pohybu, kterej se od serveru dozvěděl.
  - resetne se to v okamžiku nového příchozího packetu
    (možná postupná interpolace pozice?)
  - predikce poběží jen určitej čas (třeba 100ms nebo tak nějak),
    pak se pohyb utlumí do nuly (aby se mi nestávalo to co v AOčku, tj.
    že při velkém lagu objekt ustřelí kamsi do dáli. Zastavit ho je mnohem
    lepší).

-----------------------------------------------------------------------


Odložené TODO:
---------------

TODO: Kód Account.save() by asi měl bejt někde jinde (obecněji).
- asi by mohl volat Entity.save() nebo tak něco.
  (jde jen o save path).
(Na druhou stranu entity v zóně chci savovat do zóny, hmm...)

TODO: Po reloadu tabu se špatně zobrazuje pozice waypointu.
- asi ho budu muset posílat ze serveru spolu se scénou
  (tzn. s lodí).

TODO: Udělat classu wrapující fastbitvector.
TODO: Udlělat ji Serializable a vyhodit serializační hack ze Serializable.

TODO: Napsat serializaci/deserializaci PriorityQueue
  (a rovnou to opravit, protože to prakticky určitě nebude dobře).

TODO: Hmm, možná kdybych důsledně používal wrapper na bitvector a byl
  zděděnej ze Serializable, tak bych ho nemusel v Serializable
  řešit.

IDEA: U vehiclů je otázka, jak se budou savovat - když bude například
  pozice jen ve physicsBody, tak dokud loď body nemá, tak nemá jak pozici
  uložit. Navíc asi tak jako tak nebudu chtít savovat vnitřek b2Body.
- mohl bych to udělat tak, že vehicle vždycky bude mít PhysicsBody
  (což je moje classa) a v tom se budou savovat údaje jako pozice a podobně.
  - ha, tzn. by tam taky rovnou mohly být konstanty jako restitution a tak.
  PhysicsBody by pak mohlo a nemuselo mít b2Body.

TODO: Packety se serializují, takže bych neměl spoléhat na to, že se provede
  konstruktor. Navíc prázná pole a objekty se vůbec neposílají a spoléhá se,
  že jsou na druhé straně inicializované na nějakou defaultní hodnotu.
=> Asi bych měl ve všech packetech důsledně všem propertiesům dávat defaultní
  hodnoty.
=> A možná bych v Serializable objektech vůbec neměl používat konstruktor.
{obecně nevím, jak tohle ošetřit. Asi leda commentem na začátku souborů}
- jo a mohl bych tam asi opravdu zrušit konstruktory a setovat všechno
  dodatečně.

TODO: Zvážit, že by physics shapy byly entity (měly by unikátní idčko a tak).

TODO: Updatnout Tilemap.Data podle
  http://docs.mapeditor.org/en/stable/reference/tmx-map-format/
- respektive je tam i verze pro JSON.

TODO: Výhledově místo atlas animací používat tile animace vytvořené v Tiled
  editoru a číst je z dat tilemapy.

TODO: Časem udělat (pre)loadovací scénu.
- to pak znamená jinak loadovat pluginy, viz:
  https://github.com/photonstorm/phaser3-plugin-template


TODO: Možná by stálo za to transformaci souřadnic ještě upravit, aby [0, 0]
  bylo uprostřed obrazovky.
  (protože typicky budu chtít loď uprostřed obrazovky...)
  - i když, to možná bude lepší vyřešit kamerou.
{ Asi by to fakt chtělo - teď když resizuju hru, tak se objekty ve flight
 scéně držej vlevo nahoře, protože tam mají origin. Správně by asi mělo
 to, co je veprostřed obrazovky, zůstat uprostřed }


TODO: Zapínání a vypínání debug grafiky.
- flaga na zapnutí debug view by asi měla bejt na serveru (v accountu?)
      (bude přepínat, jestli se ve SceneUpdate bude nebo nebude
       posílat info na debug draw a když tam bude, tak ho klient
       prostě vykreslí
       - otázka ale je, co s vykreslováním bounding boxů, které
         se neposílají v každém paketu
         - asi se přepínání bude muset posílat taky).


TODO: SetWaypoint by se asi mělo posílat z něčeho jinýho než
  z Waypointu.
  - ani scéna by to neměla dělat. Možná engine?


TODO: Výhledově zrušit posílání ShipToScene
  z WebSocketServer.acceptConnection()
  a posílat ho až po nalogování playera do hry.


TODO: Výhledově líp pořešit keyboard handling. Psát extra handler na každou
  klávesu je dost overkill, navíc by se blbě psalo mapování keybindů.
  - asi to můžu udělat přes DOM eventy místo přes Phaser.


TODO: Klikání na objekty ve hře:
  You could do this using Query.point giving a mouse position and
  Composite.allBodies(engine.world). This will give you a list of
  bodies under the mouse.


TODO: Mrknout na:
  var game = new Phaser.Game("100%", "100%", Phaser.CANVAS, 'parent');
  ...
  game.scale.scaleMode = Phaser.ScaleManager.RESIZE
https://stackoverflow.com/questions/28227090/phaser-make-background-screen-width-instead-of-content-width


TODO: Vyzkoušet linear a angular drag (zapnout na physicsBody).
- to by teoreticky mělo způsobit, že síla bude muset působit pořád,
  abych udržel rychlost. Na druhou stranu...
Tohle ale až časem (možná vůbec). Současná varianta je celkem ok.


TODO: Asi budu potřebovat seekForward() a seekBackward()
(protože v současném módu se couvat moc nedá).
IDEA: Dozadu by se mohlo jet tak, že kliknu před loď a dragnu skrz loď za ni.
// IDEA: Se shiftem loď strafuje/couvá.

TODO: Odhackovat Client/Phaser/Sound.setVolume();

-----------------------------------------------------------------------

Výhledové TODO:
-----------------

TODO: Neposílat všem playerům updaty všech zón, stačí každému poslat
  update zóny, ve které se nachází.
  (Server/Game/updateClients())

TODO: Konstantu FPS ve Vehicle.ts hodit někam jinam (udělat jednu konstantu
  pro veškeré časování a tu všude používat).
- možná do Engine, pokud něco takovýho bude existovat.

TODO: Až bude Vehicle zděděné z Entity, zrušit Vehicle.getErrorIdString().

TODO: Hlasitost zvuku ostatních lidí snižovat se vzdáleností od pozice
  hráčovy lodě (nejspíš ne od pozice kamery).


TODO: Vyzkoušet dekompozici nekonvexních pologynů na konvexní:
  https://github.com/Louis-T/fernandez-polygon-decomposition
  https://github.com/schteppe/poly-decomp.js/
  - ten druhej asi neumí díry (a navíc má koordináty v poli), takže
    asi spíš ten první.
  - ideálně by se to mělo procesit offline, ale co už.
Spíš to asi odložím. Zatím můžu ručně editovat čiste konvexní polygony
  (ostatně to znamená rychlejší start.


TODO: Pořešit FileSystem.isEmpty() a FileSystem.isEmptySync()
- jsou v 'extfs', který jsem zrušil, nejsou ve 'fs-extra'


TODO: Použít https://letsencrypt.org/


TODO: Přidat comment k Serializable.deserialize(), jak se loadují
  entity (nějak přes Entities)


TODO: (Znovu) vyzkoušet ES6 moduly v browseru.
https://medium.com/dev-channel/es6-modules-in-chrome-canary-m60-ba588dfb8ab7
   <script type="module" src="module.js"></script>
- nefungují, protože browser vyžaduje v importech '.js' a typescript
  ho tam se zapnutým outputem "module": "es2015" nedává.
  viz https://github.com/Microsoft/TypeScript/issues/16577


TODO: Prostudovat avanced Typescript typy:
  https://levelup.gitconnected.com/advanced-typescript-types-with-examples-1d144e4eda9e
- nebo si to možná hodit do nějakého typescriptového howtu či manuálu.


TODO: Výhledově místo neposílání paketů do closed connection
  při disconnectu disablovat komplet herní keyboard processing.
  (viz Keyboard.sendPlayerInput())
  - component.hide() nestačí, to je vypne zobrazování.


Tslint
--------

TODO: Nepovedlo se mi rozplazit tslint extension, kterej by lintoval
  při psaní a zároveň nežral message reportnuté z buildu, které
  vyžadují type info.
    HINT: "problemMatcher": [ "$tslint5" ] je definovaný v tslint extensioně,
    takže když zapnu nějakou jinou, přestane fungovat matchování tslintových
    problémů při rebuildu.

TODO: Výhledově ještě jednou zkusit zapnout "no-unsafe-any" v tslintu
  (teď už na to nemám sílu).
TODO: Výhledově ještě jednou zkusit zapnout "strict-boolean-expressions"
  (teď už na to nemám sílu).
  - IDEA je v Serializable nepovolit v serialize/deserialize paramu
    typ any, ale nejspíš jen union některých typů.
    (bude to nejspíš znamenat, že už při vytváření paramů budu muset ošetřit,
      jestli tam neleze null nebo undefined, ale mělo by to pak dál
      ušetřit některé testy).

TODO: Tslint (co momentálně nejde v tslintu nastavit):
- zakázat newline na konci souboru
- Vyžadovat newline za if (), while() a podobně
  (teď se dá napsat na jednu řádku if (x === 0) { doSomething(); }).
- závorky za funkcí (volání i deklarace)
- jednořádkové if/for/do/while
  (mělo by to bejt tak, že když je za ifem jeden řádek a je to return nebo
   throw, tak {} být nemusí, jinak ano).
   - Hmm a vlastně ani to vždycky neplatí, protože když je za ifem
     throw new Error(), kterej se nevejde na jeden řádek, tak je taky lepší
     ho uzávorkovat do {}.
- kontroly vyžadující type information
