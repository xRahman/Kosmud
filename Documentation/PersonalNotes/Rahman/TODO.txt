TODO: Sledovat moji issue v animated tiles pluginu:
  https://github.com/nkholski/phaser-animated-tiles/issues/3


Priority:
1) Opravit pohyb lodi, aby se rozumně otáčela a zabrzdila na waypointu
   (couvání a strafování zatím netřeba).
   - ještě to není úplně ok, ale prozatím se dá.
   [done]
2) Efekty trysek (grafický a zvukový).
   [done]
3) Dát něco do scény.
4) Vyhýbání (překážkám a jiným lodím).
5) Lepší physics body shape pro loď
   [done]
   (a pro překážky taky).
6) Anchor pointy (pro exhausty, časem pro zbraně).
   - je to ještě lepší - sprity se rovnou umisťujou v Tiled editoru.
   [done]
7) Bullets (railgun a tak)
8) Rakety!
9) Lag simulátor a interpolace na clientu, aby se to netrhalo.
   - zatím asi až tak moc nespěchá, hratelný to bude i bez toho.

TODO: Výhledově zdědit Client/Ship ze Shared/Ship
  (bude to komplikovaný, páč Client/Ship je zděděná z Vehicle
   a má tudíž physics body. To by teda loď na klientu měla časem
   mít taky, ale znamenalo by to na klientu komplet inicializovat
   fyziku a vyrábět tam physics body).
   - na druhou stranu bych nemusel extra deklarovat všechny properties.
  Alternativa by byla, mít physics body až na serveru. Což by dost
    zkomplikovalo dědění (a ostatně celý smysl Vehicle v Shared je, aby
    ho mohl používat i Client).
  Ona překvapivě fyzika na clientu inicializovaná je, jen netiká (což je
    asi ok, tikat zatím nemusí).
TODO: Jméno tilemapy by se mělo brát
  ze Shared/Game/Ship/TILEMAP_NAME (aby bylo stejný na klientu
  i na serveru - je to ostatně stejná tilemapa). Teď není Client/Ship
  zděděná ze Shared/Ship, takže to není tak jednoduchý.
(viz ShipGraphics.constructor()).
TODO: Sloučit Ship na clientu a serveru, aby se používaly stejné
 properties (názvy layerů, cesta k tilemapě a tak).
 - Cesta k tilemapě teda bude muset mít jinej prefix.

TODO: Umožnit na klientu víc lodí.
- a pořádně to projít i na serveru, asi je to teď lehce zmatený.
  (getPlayerShip() je ale ok řešení, asi by šlo použít i na klientu).

TODO: Úplně se mi nelíbí, že je Tilemap pokaždý v jiným adresáři
  (v /Shared/Physics, /Server/Physics ale /Client/Phaser).

IDEA: Client/Phaser přejmenovat na Client/Engine
- pak by teoreticky mohl být i Shared/Engine a Server/Engine a Tilemap
  by mohla být tam.

TODO: Scene by měla wrappovat Phaser.Scene, ne extendovat
  (všude mám wrappery jen scéna je potomek).

TODO: doladit vizuály exhaustů
- úlně je schovávat, když nejsou aktivní.
- dát jim nějakou minimální délku (jako u zadních).

TODO: Server root jsem vrátil na ${workspaceRoot} - server servuje
  klienta, takže to dává smysl.
  - možná by se Client mohl rovnou jmenovat WWW, wwwRoot, nebo tak něco
    (i když, Client je asi ok).
- Potom je taky otázka, jestli má vůbec smysl adresář /Server.
  Spíš ne, je to akorát matoucí. Momentálně obsahuje /js a /Keys,
  což obojí asi může bejt rovnou v rootu (/js by se možná mohlo jmenovat
  /build, ale na clientu je to /js, tak asi dává smysl mít to stejně).

TODO: odchytávat výjimky z Tilemap.getShape().



TODO: Refactoriiiing!
- Místo Phaser.Scene všude předávat Scene
  (což je z ní beztak zděděné, ale je to můj interní typ).



TODO: Když umře server tak SendWaypoint na klientu hodí Uncaught Error.

TODO: Projít všechny metody ve Vehicle, jestli musejí být public.


Opravy steeringu
-----------------

TODO: Přijde mi, že MAXIMUM_SPEED lodi nic nedělá
- vektory jsou delší, to jo, ale vizuálně loď neletí rychlejš.
- a taky je divný, že se pořád letí na maximum thrust
  (to je teda fajn - sice to není fyzikálně správně, ale vypadá to dobře).

TODO: Odchytávání výjimek ze Steeringu.
- to už možná je, ale chce to zkontrolovat.

 Refactorovat steering
- různá chování počítají jen desired velocity
  I když, to je otázka.
  - Za prvé nevím, jestli bude fungovat skládání behaviourů přes rychlosti
    (nejspíš je nějakej důvod, proč se skládaj až výsledné steering forces)
  - Za druhé nevím, co složitější behaviours s těma silama dělaj...
Ok, asi se raději budu držet skládání sil.

TODO: Forward thrust se z nějakých důvodů limituje na 80% výkonu.

TODO: Steering by se možná choval líp, kdyby se prostě loď nejdřív otočila
  do požadovaného směru a pak se aplikoval jen forward/backward thrust.
- rozhodně to budu muset ještě poladit.
TODO: Asi budu muset přece jen trošku poladit arrive() - na thrusterech
  je vidět, jak se to občas chová divně.
TODO: Opravit "backlash" při zastavování.


-----------------------------------------------------------------------


Prozatímní řešení client-server predikce
-----------------------------------------

TODO: Napsat "simulátor lagu"
  (random setInterval() před posláním packetu).


TODO: Fyziku přesunout do shared kódu (ve finálu tam bude muset bejt,
  aby šlo dělat client-side simulaci, tak bych s tím rovnou mohli počítat.
  (klient-side simulaci ale zatím dělat nebudu).

TODO: Na klienta posílat nejen aktuální stav, ale i rychlost a rotaci.
  Klient bude pokračovat v pohybu, kterej se od serveru dozvěděl.
  - resetne se to v okamžiku nového příchozího packetu
    (možná postupná interpolace pozice?)
  - predikce poběží jen určitej čas (třeba 100ms nebo tak nějak),
    pak se pohyb utlumí do nuly (aby se mi nestávalo to co v AOčku, tj.
    že při velkém lagu objekt ustřelí kamsi do dáli. Zastavit ho je mnohem
    lepší).

-----------------------------------------------------------------------

Bugfixy phaseru:
-------------------

TODO: Sledovat opravu https://github.com/photonstorm/phaser/pull/3964
  (momentálně mám hacknutou client-side opravu v 'up: function (event, time)').
  https://github.com/photonstorm/phaser/issues/3779



Odložené TODO:
---------------

TODO: Updatnout Tilemap.Data podle
  http://docs.mapeditor.org/en/stable/reference/tmx-map-format/
- respektive je tam i verze pro JSON.

TODO: Výhledově místo atlas animací používat tile animace vytvořené v Tiled
  editoru a číst je z dat tilemapy.

TODO: Časem udělat (pre)loadovací scénu.
- to pak znamená jinak loadovat pluginy, viz:
  https://github.com/photonstorm/phaser3-plugin-template


TODO: Možná by stálo za to transformaci souřadnic ještě upravit, aby [0, 0]
  bylo uprostřed obrazovky.
  (protože typicky budu chtít loď uprostřed obrazovky...)
  - i když, to možná bude lepší vyřešit kamerou.


TODO: Zapínání a vypínání debug grafiky.
- flaga na zapnutí debug view by asi měla bejt na serveru (v accountu?)
      (bude přepínat, jestli se ve SceneUpdate bude nebo nebude
       posílat info na debug draw a když tam bude, tak ho klient
       prostě vykreslí
       - otázka ale je, co s vykreslováním bounding boxů, které
         se neposílají v každém paketu
         - asi se přepínání bude muset posílat taky).


TODO: SetWaypoint by se asi mělo posílat z něčeho jinýho než
  z Waypointu.
  - ani scéna by to neměla dělat. Možná engine?


TODO: Výhledově zrušit posílání ShipToScene
  z WebSocketServer.acceptConnection()
  a posílat ho až po nalogování playera do hry.


TODO: Výhledově líp pořešit keyboard handling. Psát extra handler na každou
  klávesu je dost overkill, navíc by se blbě psalo mapování keybindů.
  - asi to můžu udělat přes DOM eventy místo přes Phaser.


TODO: Klikání na objekty ve hře:
  You could do this using Query.point giving a mouse position and
  Composite.allBodies(engine.world). This will give you a list of
  bodies under the mouse.


TODO: Mrknout na:
  var game = new Phaser.Game("100%", "100%", Phaser.CANVAS, 'parent');
  ...
  game.scale.scaleMode = Phaser.ScaleManager.RESIZE
https://stackoverflow.com/questions/28227090/phaser-make-background-screen-width-instead-of-content-width


TODO: Vyzkoušet linear a angular drag (zapnout na physicsBody).
- to by teoreticky mělo způsobit, že síla bude muset působit pořád,
  abych udržel rychlost. Na druhou stranu...
Tohle ale až časem (možná vůbec). Současná varianta je celkem ok.


TODO: Asi budu potřebovat seekForward() a seekBackward()
(protože v současném módu se couvat moc nedá).
IDEA: Dozadu by se mohlo jet tak, že kliknu před loď a dragnu skrz loď za ni.
// IDEA: Se shiftem loď strafuje/couvá.

TODO: Odhackovat Client/Phaser/Sound.setVolume();

-----------------------------------------------------------------------

Výhledové TODO:
-----------------

TODO: Hlasitost zvuku ostatních lidí snižovat se vzdáleností od pozice
  hráčovy lodě (nejspíš ne od pozice kamery).


TODO: Vyzkoušet dekompozici nekonvexních pologynů na konvexní:
  https://github.com/Louis-T/fernandez-polygon-decomposition
  https://github.com/schteppe/poly-decomp.js/
  - ten druhej asi neumí díry (a navíc má koordináty v poli), takže
    asi spíš ten první.
  - ideálně by se to mělo procesit offline, ale co už.
Spíš to asi odložím. Zatím můžu ručně editovat čiste konvexní polygony
  (ostatně to znamená rychlejší start.


TODO: Pořešit FileSystem.isEmpty() a FileSystem.isEmptySync()
- jsou v 'extfs', který jsem zrušil, nejsou ve 'fs-extra'


TODO: Použít https://letsencrypt.org/


TODO: Přidat comment k Serializable.deserialize(), jak se loadují
  entity (nějak přes Entities)


TODO: (Znovu) vyzkoušet ES6 moduly v browseru.
https://medium.com/dev-channel/es6-modules-in-chrome-canary-m60-ba588dfb8ab7
   <script type="module" src="module.js"></script>
- nefungují, protože browser vyžaduje v importech '.js' a typescript
  ho tam se zapnutým outputem "module": "es2015" nedává.
  viz https://github.com/Microsoft/TypeScript/issues/16577


TODO: Prostudovat avanced Typescript typy:
  https://levelup.gitconnected.com/advanced-typescript-types-with-examples-1d144e4eda9e
- nebo si to možná hodit do nějakého typescriptového howtu či manuálu.


TODO: Výhledově místo neposílání paketů do closed connection
  při disconnectu disablovat komplet herní keyboard processing.
  (viz Keyboard.sendPlayerInput())
  - component.hide() nestačí, to je vypne zobrazování.


Tslint
--------

TODO: Nepovedlo se mi rozplazit tslint extension, kterej by lintoval
  při psaní a zároveň nežral message reportnuté z buildu, které
  vyžadují type info.
    HINT: "problemMatcher": [ "$tslint5" ] je definovaný v tslint extensioně,
    takže když zapnu nějakou jinou, přestane fungovat matchování tslintových
    problémů při rebuildu.

TODO: Výhledově ještě jednou zkusit zapnout "no-unsafe-any" v tslintu
  (teď už na to nemám sílu).
TODO: Výhledově ještě jednou zkusit zapnout "strict-boolean-expressions"
  (teď už na to nemám sílu).
  - IDEA je v Serializable nepovolit v serialize/deserialize paramu
    typ any, ale nejspíš jen union některých typů.
    (bude to nejspíš znamenat, že už při vytváření paramů budu muset ošetřit,
      jestli tam neleze null nebo undefined, ale mělo by to pak dál
      ušetřit některé testy).

TODO: Tslint (co momentálně nejde v tslintu nastavit):
- zakázat newline na konci souboru
- Vyžadovat newline za if (), while() a podobně
  (teď se dá napsat na jednu řádku if (x === 0) { doSomething(); }).
- závorky za funkcí (volání i deklarace)
- jednořádkové if/for/do/while
  (mělo by to bejt tak, že když je za ifem jeden řádek a je to return nebo
   throw, tak {} být nemusí, jinak ano).
   - Hmm a vlastně ani to vždycky neplatí, protože když je za ifem
     throw new Error(), kterej se nevejde na jeden řádek, tak je taky lepší
     ho uzávorkovat do {}.
- kontroly vyžadující type information
