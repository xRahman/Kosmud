TODO: Zvážit použití
  https://marketplace.visualstudio.com/items?itemName=eg2.ts-tslint
  (kvůlivá kontrolám, které vyžadují type information)

Warning: member-ordering - Bad member kind: public-before-private
Warning: The 'prefer-readonly' rule requires type information.
Warning: The 'promise-function-async' rule requires type information.
Warning: The 'await-promise' rule requires type information.
Warning: The 'no-floating-promises' rule requires type information.
Warning: The 'no-for-in-array' rule requires type information.
Warning: The 'no-inferred-empty-object-type' rule requires type information.
Warning: The 'no-unsafe-any' rule requires type information.
Warning: The 'restrict-plus-operands' rule requires type information.
Warning: The 'strict-boolean-expressions' rule requires type information.
Warning: The 'use-default-type-parameter' rule requires type information.
Warning: The 'deprecation' rule requires type information.
Warning: The 'match-default-export-name' rule requires type information.
Warning: The 'no-boolean-literal-compare' rule requires type information.
Warning: The 'no-unnecessary-type-assertion' rule requires type information.
Warning: The 'return-undefined' rule requires type information.
[Warn  - 6:31:20 PM] Warning: member-ordering - Bad member kind: public-before-private
[Warn  - 6:31:20 PM] Warning: The 'prefer-readonly' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'promise-function-async' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'await-promise' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'no-floating-promises' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'no-for-in-array' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'no-inferred-empty-object-type' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'no-unsafe-any' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'restrict-plus-operands' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'strict-boolean-expressions' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'use-default-type-parameter' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'deprecation' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'match-default-export-name' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'no-boolean-literal-compare' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'no-unnecessary-type-assertion' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'return-undefined' rule requires type information.
[Warn  - 6:33:48 PM] vscode-tslint: Cannot read tslint configuration - 'Failed to load c:\Brutus\Kosmud\Src\tslint.json: Unexpected string in JSON at position 1515 in c:\Brutus\Kosmud\Src\tslint.json'



TODO: Tslint (co momentálně nejde v tslintu nastavit):
- zakázat newline na konci souboru
- Vyžadovat newline za if (), while() a podobně
  (teď se dá napsat na jednu řádku if (x === 0) { doSomething(); }).
- závorky za funkcí (volání i deklarace)
- jednořádkové if/for/do/while
  (mělo by to bejt tak, že když je za ifem jeden řádek a je to return nebo
   throw, tak {} být nemusí, jinak ano).
   - Hmm a vlastně ani to vždycky neplatí, protože když je za ifem
     throw new Error(), kterej se nevejde na jeden řádek, tak je taky lepší
     ho uzávorkovat do {}.



TODO: Debugové zobrazení fyziky na klientu
  - physics body (obrys)
    [done]
  - target position
    - k tomu budu potřebovat měnit pozici pouze při button_down
  - desired velocity
    - k tomu ji budu muset posílat v rámci SceneUpdate
    - flaga na zapnutí debug view by asi měla bejt na serveru (v accountu?)
      (bude přepínat, jestli se ve SceneUpdate bude nebo nebude
       posílat info na debug draw a když tam bude, tak ho klient
       prostě vykreslí
       - otázka ale je, co s vykreslováním bounding boxů, které
         se neposílají v každém paketu
         - asi se přepínání bude muset posílat taky).
  - steering force
    (a to před limitem i po limitu ať vidím, jak moc se mi to ořezává)


Ok, co dál:
- načítat data z Tiles editoru nepotřebuju, dokud nebudu řešit kolize,
  vyhýbání se překážkám a tak.

Potřebuju vyzkoušet steering behaviours (obecně si ujasnit, jak se bude
  ovládat loď).
  - follow by asi mohlo stačit.
  - a close nejspíš (zastavování).
    - zatím vůči jednomu bodu (mouse click).
    - časem vůči nejbližšímu vertexu od všech překážek v určité vzdálensoti.



TODO:
  7. update vehicle rotation according to the angle of the vehicle velocity
  (Vůbec jsem na pár kroků seek() zapomněl).

TODO: Omezit ve Steering.seek() rotaci a vracet ji jako další return value.

TODO: Aplikovat rotaci ze Steering.seek()
  (asi ne přes Torque Force ale rovnou přes SetAngularVelocity()).
  - což je ok, protože steering se volá v dalším tiku znova, takže se
    angular velocity bude průběžně updatovat.


Výhledově budu potřebovat načíst výstup z Tiled editoru.


-----------------------------------------------------------------------

TODO: Shared/Game/Ship je možná zbytečná, Ship na clientu z ní není
  zděděná.

-----------------------------------------------------------------------

TODO: Zvážit, jestli místo matter.js nepoužít radši Box2d


Prozatímní řešení client-server predikce
-----------------------------------------

TODO: Napsat "simulátor lagu"
  (random setInterval() před posláním packetu).


TODO: Fyziku přesunout do shared kódu (ve finálu tam bude muset bejt,
  aby šlo dělat client-side simulaci, tak bych s tím rovnou mohli počítat.
  (klient-side simulaci ale zatím dělat nebudu).

TODO: Na klienta posílat nejen aktuální stav, ale i rychlost a rotaci.
  Klient bude pokračovat v pohybu, kterej se od serveru dozvěděl.
  - resetne se to v okamžiku nového příchozího packetu
    (možná postupná interpolace pozice?)
  - predikce poběží jen určitej čas (třeba 100ms nebo tak nějak),
    pak se pohyb utlumí do nuly (aby se mi nestávalo to co v AOčku, tj.
    že při velkém lagu objekt ustřelí kamsi do dáli. Zastavit ho je mnohem
    lepší).


-----------------------------------------------------------------------


TODO: Updatovat verzi tasks.json (budu to muset celý předělat...)


-----------------------------------------------------------------------

Odložené TODO:
---------------

TODO: Výhledově zrušit posílání ShipToScene
  z WebSocketServer.acceptConnection()
  a posílat ho až po nalogování playera do hry.


TODO: Výhledově líp pořešit keyboard handling. Psát extra handler na každou
  klávesu je dost overkill, navíc by se blbě psalo mapování keybindů.
  - asi to můžu udělat přes DOM eventy místo přes Phaser.


TODO: Klikání na objekty ve hře:
  You could do this using Query.point giving a mouse position and
  Composite.allBodies(engine.world). This will give you a list of
  bodies under the mouse.


TODO: Mrknout na:
  var game = new Phaser.Game("100%", "100%", Phaser.CANVAS, 'parent');
  ...
  game.scale.scaleMode = Phaser.ScaleManager.RESIZE
https://stackoverflow.com/questions/28227090/phaser-make-background-screen-width-instead-of-content-width


-----------------------------------------------------------------------

Výhledové TODO:
-----------------

TODO: Pořešit FileSystem.isEmpty() a FileSystem.isEmptySync()
- jsou v 'extfs', který jsem zrušil, nejsou ve 'fs-extra'


TODO: Použít https://letsencrypt.org/


TODO: Přidat comment k Serializable.deserialize(), jak se loadují
  entity (nějak přes Entities)


TODO: (Znovu) vyzkoušet ES6 moduly v browseru.
https://medium.com/dev-channel/es6-modules-in-chrome-canary-m60-ba588dfb8ab7
   <script type="module" src="module.js"></script>
- nefungují, protože browser vyžaduje v importech '.js' a typescript
  ho tam se zapnutým outputem "module": "es2015" nedává.
  viz https://github.com/Microsoft/TypeScript/issues/16577


TODO: Prostudovat avanced Typescript typy:
  https://levelup.gitconnected.com/advanced-typescript-types-with-examples-1d144e4eda9e
- nebo si to možná hodit do nějakého typescriptového howtu či manuálu.


TODO: Rozhodnout dilema s pojmeováváním class
- vidím to na SharedClass, Client/Class, Server/Class
- zatím používám trik:
   import * as Shared from '.../Class';
   class Class extends Shared.Class {}
Je to teda pořád otázka. ClientEntities a ServerEntities jsou asi názornější,
než když se tři classy jmenují stejně.


TODO: Výhledově sjednotit formát importů (asi import { ERROR } from './ERROR').
- spíš to nechám postaru. Vidět v importu, jestli je to ze /Shared, /Client
  nebo /Server je docela důležitý.


TODO: Výhledově místo neposílání paketů do closed connection
  při disconnectu disablovat komplet herní keyboard processing.
  (viz Keyboard.sendPlayerInput())
  - component.hide() nestačí, to je vypne zobrazování.