TODO: Sledovat moji issue v animated tiles pluginu:
  https://github.com/nkholski/phaser-animated-tiles/issues/3

TODO: Sledovat moji issue v typescript Box2d:
  https://github.com/flyover/box2d.ts/issues/50

TODO: Sledovat opravu https://github.com/photonstorm/phaser/pull/3964
  (momentálně mám hacknutou client-side opravu v 'up: function (event, time)').
  https://github.com/photonstorm/phaser/issues/3779
- fixnuli to. Otázka je, kdy releasnou verzi, ve které to bude opravené.

-----------------------

Problém: Prolinkování referencí při deserializaci.
- asi by to šlo udělat tak, že zkusím, jestli už entita existuje, pokud ano,
  vezmu si na ni referenci a pokud ne, uložím se do seznamu referencí,
  které je třeba prolinkovat dodatečně.
  - v seznamu by byl vždycky objekt, název property, která se má nastavit
    a příslušný idčko.


TODO: Player v connection na Clientu je invalid entity. Zjistit proč.
- aha tak player je v pohodě, activeShip je invalid...
- nejspíš to je tím, že playera nepřidávám do entit packetu.
  - tak zjevně přidávám. Hmm.
- jo aha, player se tam dává, ale activeShip možná ne...
Setnutí playera do packetu až po setnutí zóny pomohlo (při deserializaci
  se rovnou nastaví reference na velid entitu). Uvnitř activeShip jsou ale
  pořád invalid reference na assety - a to je problém, protože ty jsou
  v contentu packetu, kterej se deserializuje až po entitách.
  - i když vlastně ne, assety jsou taky entity. Zjevně se ale do packetu
    dávaj až po lodi.

TODO: Odhackovat tvrdej import Zone.ts z KosmudClient.ts.


TODO: Zkontrolovat wording hlášky v Serializable.ts:402


TODO: Client adresář by měl bejt definovanej konstantou, neměl by se
  přilepovat explicitní string.



Zóna by měla vědět, jaké pod ni spadají definice assetů, aby
  se daly poslat spolu s ní.
- definice by možná neměly bejt entity (to až vlastní assety).
  (entity jsem z toho chtěl mít kvůli tomu, aby assety měly unikátní
   idčko - to se totiž používá v Phaseru.)
  => Všechny assety musí existovat i na serveru, protože idčka entit
   se generují jen tam.
Možná bych se měl vykašlat na optimální řešení a udělat to přes brute-force.
  Optimalizovat můžu potom.
- tzn. narvat assety do entity a nechat je, ať si je loadnou samy.


Výhledově (refactoring):
-------------------------

TODO: Projít Asset descriptory a zamyslet se nad tím, jestli jsou properties
  rozumně inicializované.

TODO: Zvážit, jeslti by se Zones a Assets nedaly přesat jako namespace + class.
  Možná by to bylo přehlednější než verze se statickými metodami.

TODO: Pokud nebude potřeba Shared/Zones, smazat příslušný soubor.

TODO: Místo "Doesn't exist" by bylo asi lepší použít prostě 'undefined'.
  Znamená to to samý, je to kratší a zafunguje to i u stringů.

TODO: V assetech by mělo bejt .clientPath místo .path
  (páč je to cesta platná jen na klientu, na serveru se před ni musí dávat
   /Client/).

-----------------------

TODO: Pustil jsem se do psaní Server/EntityList (společný předek Assets
  a Zones), ale vůbec mi to nejde. Takže příště asi znovu a lépe.
- mám dojem, že jsem začal dělat dvě věci dohromady: Společnýho předka
  a současně přesun instance dovnitř Assets a Zones. Takže raději popořadě
  (nejdřív instanci dovnitř).
Přidal jsem .instance do Assets s tím, že load() ji přepíše novou instancí.
  Neřešil jsem zatím metody a nic dalšího.

TODO: Server/EntityList.dataDirectory by mělo bejt někde jinde
  (v Game?)

TODO: Asi by bylo lepší, aby instance assets držely Assets a instanci zones
  držely Zones (místo Game). I když... (ale asi jo).
- zjevně to fakt potřebuju.

TODO: Zones a Assets mají hodně podobnej kód - udělat jim společnýho předka.


TODO: Do loginResponse se nedává zóna.
- protože player nemá activeShip.

TODO: Při reloadu browser tabu se asi server pokusí znova lodnout
  stejného playera (což hodí exception, že už je loadnutý).


TODO: V zóně potřebuju seznam physics entit (paralelně k seznamu všech entit).


TODO: Při loadu přidat loď do physics worldu.
- to teď řeším - znamená to v zóně projít všechny physics entity
  a zavolat jim addToPhysicsWorld().


TODO: Na serveru vyrábět všechny potřebný assety (včetně textury lodi,
  texture atlasu exhaustů...).
  - a přidávat je do lodi, aby se posílaly na klienta.

TODO: Promyslet a pořešit problém "own" properties.
   Shared/VehiclePhysics.setShapeAsset()
Pozn.: Něco je divně, protože když jde o instanci root prototypu,
  tak přece musí mít zděděné properties inicializované na "Not set"
  (protože prototyp je prostě jen 'new Class');


TODO: Ošetřit, když při savování souboru neexistuje adresář
  (teď to hodí ENOENT, což není moc informativní).
- asi by se ten adresář měl automaticky vyrobit.


TODO: Výhledově udělat globální konstantu DATA_DIRECTORY.
  a asi i CLIENT_DIRECTORY (k cestám pro tilemapy přidávám './Client/')

Pozn.: Na serveru bych nemusel mít tilemapy v TilemapAssetech,
  mohl bych je mít v seznamu indexovaném idčkem tilemapAssetu.
  (když bych chtěl nechat Assety čistě jako definice).

TODO: Možná bych assety taky mohl zabalit do assets a nesavovat je jako
jednotlivý entity.
.
TODO: Savovat Server/Assets při savu (při přidání, možná?) assetů.
- zatím volám save() ručně, ale bylo by lepší, kdyby se savovalo
  automaticky při přidání nového assetu.
TODO: totéž se táká zón (save Zones when new Zone is added).
- Problém je, že potom vyrobení nové zóny/assetu bude async operace.

TODO: funkce loadTilemap() v Assets by asi měla bejt spíš v server
  verzi TilemapAssetu.

TODO: lepší vyrábění server path k tilemapě
  (ošetřit případné ./ na začátku cesty)
  - je to ve funkci loadTilemap() v Server/Assets

TODO: Property jako
    public path = "<missing file path>";
  by asi měly bejt spíš privat s příslušnou get a set metodou.
  (Takže při getu to hodí výjimku, když se pracuje s neinicializovanou
   propertou).

Ok, takže TODO:
0) Zrušit stávající loadování.
1) Při vyrábění nových assetů a jejich setování do entit:
   - je přidávat do Server/Assets (deduplikace podle idčka).
   - je přidávat do Zone/Assets (deduplikace podle idčka).
2) Při loadování na serveru prostě loadnout Assets.
3) Při posílání na klienta prostě poslat zone.assets.

Tím jsem ale nepořešil, jak loadovat Tilemapy a jak na klientu
  vyrábět assety do scény.
Ok, takže jak na preload. Možnosti jsou:
- polymorfní AssetEntity
  (musel bych k nim mít client a server verze a problém je, že na klientu
   to chce předávat scénu jako parametr)
- rovnou při přidávání to rozhodit do víc seznamů
  Hmm. Vzato kolem a kolem, tohle se může udělat už při zakládání
    novýho assetu.
  - při přidání novýho typu assetu budu teda muset vyrobit novej
    seznam v assets... A v zone...
    (leda by byl seznam assetů typ, kterej prostě importnu).
- nedělat to přes seznamy, procházet rovnou entity v zóně
  - to asi fakt ne.

class AssetList extends Serializable
{
  textures;
  sounds;
  tilemaps;
  shapes;

  addTexture();
  addSound();
  addTilemap();
  addShape();
}

(generování seznamu assetů v zóně můžu taky nechat, jak je, tzn. že
 entita bude mít seznam svých assetů a před posláním zóny se projdou
 entity v zóně).
 - pořád je lepší dávat asset do seznamu jen při jeho setnutí do entity,
   než pokaždý, když dávám entitu do zóny.
Na druhou stranu když už mám zónu na klientu a přidám do ní entitu...
- Když bych nechal assety čistě v entitách, tak by se prostě přidaly při
  poslání nový entity. Na druhou stranu asset asi v phaseru nejde loadnout
  za běhu (nebo jo?)
Tzn. prostě seznam assetů v zóně vůbec nebudovat a až na klientu projít
  seznam entit v zóně a preloadnout to z něj?
  (ideálně asi přes ship.loadAssets()).

Obecně bude asi nejlepší neřešit polymorfismus na úrovni assetů,
  ale na úrovni entit, které je vlastní.
  - loď ví, že má odkaz na tilemapu, tak ji může loadnout. A ví taky,
    ve který je scéně.

Na serveru by dávalo vůbec největší smysl mít assety v Assets a loadnout
  prostě celé Assets.
  - a tudíž můžu loadnout i tilemapy.
    (možná si tilemap assety dávat do samostatnýho seznamu?)
Na klienta asi nechci posílat úplně všechny, takže nějaké zjištění, jaké
  assety zrovna zóna používá, asi fakt bude na místě.
- nebo je fakt rovnou do zóny registrovat...

IDEA:
- Nechat AssetEntity čistě jako definice a čistě Shared
- Do Assets dávat instance assetů (tilemap, zvuků, atd.),
  indexovaný asi idčkem asset entity.
Na klientu by se volalo asi něco jako Assets.createSceneAsset(scene, assetDef)
  (to ale furt neřeší to, že potřebuju polymorfismus).

Ehm - vytváření seznamu unikátních assetů nebude fungovat, protože jsou
  to invalid reference a ta se vždycky vyrábí nová.
  - musel bych ten seznam indexovat idčkem (nebo ho vyrábět z validních entit,
    tzn. v runtime).
- místo to entity.assets můžu přidávat rovnou do zone.assets
  (pokud se to bude deduplikovat, tak ale musím přidat counter, abych věděl,
   kdy to můžu vyhodit).

Možnosti jsou:
- když už mám seznam assetů v zóně, tak ho prostě
  projít a provolat polymorfní load()
    (ve kterém se loadnou tilemapy)
  - většinou se nic nestane, ale co.
   (pokud bude mít TilemapEntity rovnou v sobě Tilemapu, tak tohle bude
    dávat dobrej smysl).


TODO: TODO v Server/Zone.loadTilemaps()
  (neprocházet ships, ale nějakej obecnější seznam entit s fyzikou)
  - nebo možná shapy registrovat do zóny ve chvíli, kdy se přidává
    entita se shapem.
  - nebo na to kašlat úplně a vyrábět shape z tilemapy až on-demand
    (ShapeDefinition má odkaz na TilemapDefinition, která obsahuje
     idčko tilemapy).
    Hmm, sakryš, špatně - řeším load tilemapy, ne shapu.
- Asi bych se měl vrátit k tomu, že projdu všechny entity v zóně
  a vytvořím při tom seznamy tilemap a shapů.
- Stačí seznam shapů, tilemapy si z něj vytáhnu.

Pak se taky budu muset ještě jednou zamyslet, kdo bude držet odkaz na shape.
- zjevně jednotlivý lodě, ale když budu chtít třeba loadnout jinou, tak
  se budu k tomu shapu potřebovat dostat (nechci mít u každý lodě separátní
  instanci shapu, leda by se teda měnil třeba při poškození lodě - na to ale
  zatím kašlat).
  - ShapeAsset entita je logický místo, no.

IDEA: Místo TextureDefinition říkat TextureEntity
  (sice budu mít přeentitováno, ale bude z toho jasný, že jde o entitu).

TODO: Sakryš, cesta k tilemapě je na serveru jiná než na klientu
  - kurnik, co s tím?
(Zatím nic, přeložit to půjde i takhle. Pořeším to potom.)

TODO: Zkusit předělat loadování a savování definic assetů tak, aby se
  savovaly do podadresáře podle class name
  (znamenalo by to do reference savovat i className, což by asi šlo);

Ehm, takže co s tím?
- definice assetů nebudu savovat společně se zónou, protože mohou být použity
  ve více zónách (tzn. se nic nemění).
- na serveru zavést loadAssetDefinitions().
- na serveru udělat fci na vytvoření seznamu tilemap a shapů v zóně.
- projít ty seznamy, loadnout tilemapy a pak z nich initnout shapy.

- nebudu si to komplikovat. V zóně mám seznam ships, takže ho
  prostě projdu a řeknu si o shapy a tilemapy.
  (protože ships jsou teď jediné entity v zóně, které mají shapy).

Hms, na klientu se vlastně definice assetů vůbec neloadujou, protože
  přijdou paketem.
- LoadAssets() znamená něco jinýho než loadAssetDefinitions() (což se musí
  dělat jen na serveru).

A hmm, na serveru v zásadě musím loadovat jen tilemapy (textury a podobně
  nemusím vůbec procházet), takže dělat obecnej load() u assetů je zbytečný.
(navíc to teď potřebuju hlavně rozchodit, refactorovat můžu potom).


TODO: Safra, Shared/Zone.compileListOfAssets() taky není dobře, respektive
  celé vkládání entit do zóny.
- container entity se vkládají do sebe, takže nejde prostě prohlásit
  zónu za container a všechno házet do contents (leda by entita mohla bejt
  ve více kontejnerech a to je taky problém).
Správně by měla mít zóna vlastní seznam jiný než contents, do kterého se
  dávají všechny entity v zóně (podobně jako packet - možná by to mohlo
  mít společného předka?).

IDEA: Zóna na klientu by mohla vědět, ke ve které scéně se renderuje.
  Díky tomu by Asset.load() mohl mít jako parametr vždycky zónu
  (a navíc ideálně Shared.Zone) a zóna na klientu by prostě zavolala
  load assetu do scény.
- na druhou stranu asi pořád budu potřebovat server a client verze assetů
  kvůli polymorfismu (některé assety se na serveru vůbec neloadují). Leda
  bych to přenesl do zóny...

Ok. Když bych chtěl mít jen Shared verze asset class, tak:
- shared assety by měly load(zone), kde by se zavolalo zone.loadXYasset().
- client a server verze zóny by měly různé verze těchle metod.

Pak je tu ještě úplně jiná možnost - vůbec nebuildit seznam assetů
  a místo toho při průchodu entitama v zóně rovnou loadnout příslušné
  assety. Tzn. by se vůbec nevolalo asset.load(), ale třeba Ship
  by ve svém loadAssets() natvrdo loadla příslušné assety rovnou
  podle druhu.

Pozn: Asi chci, aby assety (definice) měly přímo odkaz na phaser object...
- i když to je blbost, k jedné SoundDefinition může existovat víc instancí
  Phaser.Sound.
Platí to ale u tilemap, protože ty jsou taky generické (úplně ideálně
  bych asi měl zrušit Engine/Tilemap a dát to rovnou do assetu.
- nebo naopak vyhodit odkaz na Engine/Tilemap z definice.
To je asi dost základní otázka: Má bejt AssetDefinition pouze
  definice (datová struktura), podle které to loadne někdo jinej,
  nebo to má bejt komplet asset se vším všudy?
Spíš dává smysl jen definice a jen v Shared.
- jak potom na lodování?
Na serveru:
- zóna projde všechny entity
  (otázka na okraj: Kam se loadnuté assety (třeba Server/Tilemap) uloží?)
  - to souvisí s tím, kdo ho pak používá.
    - na serveru v zásadě asi jen při initu shapů...

POZN.: Pak tu ještě byla úvaha, že bych definice assetů přihodil do zóny
  - tím by se mi automaticky loadnuly při loadu zóny.
(Jasně, protože já teď spojuju dvě různé věci dohromady: Load definice assetu,
 tedy entity, a následný load Tilemapy, kterou ta definice popisuje).
- Problém nastane, když bude asset použitej ve více zónách
  (tomu jsem původně chtěl bránit právě tím, že se každá entita savuje
   nezávisle).



Možná by scény přece jen měly bejt taky entity, aby se daly
  editovat a savovat na serveru
  (definice, co ve scéně je, atd.)
- na druhou stranu to může bejt i přímo v kódu, ten se taky "posílá"
  na klienta (a různý scene ui a podobně se bude stejně měnit spíš
  podle stavu hry než podle obsahu).
  - a hlavně to nemusím nutně řešit teď.


Ještě bych asi přece jen měl zvážit, jestli by na klientu neměla
  zone assety loadovat zóna, aby to bylo stejně jako na serveru.

TODO: V LoginReponse() dát background scéně seznam assetů
 a následně ji loadnout (nevím, jak se to dělá teď).

TODO: Taky nějak pořešit FlightSceneGUI - assety by se měly přidat
  do scene assetů.

TODO: Asi fakt bude lepší použítvat AssetDefinition
  (TextureDefinition, SoundDefinition, etc.) místo SoundAsset, etc.

-----------------------

TODO: Zrušit Server/Zone.getUpdate() a posílat místo toho rovnou zónu.

-----------------------

Ok, shapy a tilemapy:

  Na klientu:
    - musím nejdřív nechat scénu, ať loadne assety
      (tím se loadne json tilemapy).
    - následně je mým ultimátním cílem vytvořit shapy,
      takže technicky vzato bych asi mohl projít shape assety
      a ve chvíli, když asset potřebuje tilemapu, tak se ta
      tilemapa vytvoří z příslušných json dat (který si vytáhne
      ze scény přes svoje idčko).
    Problém je, že nemám nikde seznam shapů v zóně.
    - ale mohl bych jít ještě o krok dál - shapy jsou potřeba
      ve chvíli, kdy se loď přidává do physics worldu. Tzn. bych
      možná mohl shapy vyrábět taky on-request
      (data tilemapy se nějak složitě parsujou, ale to se v zásadě
       dá udělat on-request, není to async operace).
TODO: Takže vyzkoušet, jestli půjde jít na to odzadu. Tzn. začít
  vytvořením physics worldu a vložením lodi.

-----------------------

TODO: Zajistit (a hlídat), že zone entity jsou vždycky právě v jedné zóně.
  (Jinak bych měl jednu entitu ve více savech).
- při loadu zóny taky kontrolovat, že entity ještě nejsou loadnuté
  (pokud ano, tak to právě znamená, že mám entitu ve více zónách).
  (bude to asi někde v přetížení deserializace zóny).


TODO: 'assets' by se možná mohly setnout rovnou do zóny místo to LoginResponse.
  beztak by se v loginResponse.precess() setovaly do zóny (a jsou to assety
  zóny).
- nechtěl jsem je tam ale dávat, aby se mi neposílaly při každym zone updatu...
Hmm, takže nakonec bude asi nejlepší nechat assets v LoginResponse, vůbec
  je nedávat do zóny a loadAssets() zavolat přímo z LoginResponse, nebo
  případně ze scény (passnout to do loadu scény, nebo tak něco).
Ok, tak ještě trochu jinak:
- assety si musí loadnout scéna v preloadu, tzn. je musím
  v LoginResponse.process() setnout do scény.

TODO: FlightScene.assets by možná mohly bejt rovnou ve Scene, protože
  každá scéna asi bude mít (a loadovat) nějaký assety.
- hmm, viz třeba textura waypointu, to by taky měl bejt TextureAsset.

TODO: Předělat Client/Zone.loadAssets()
- projít this.assets() a zavolat na každém z nich load().
TODO: Implementovat load() na asset classách
  (možná to bude chtít, udělat jim klient verze...)

TODO: Poznámka o true prototypal inheritance do ClassFactory.
[done]

TODO: Zvážit poznámku v Entity (možná použít novější verzi z ClassFactory).

TODO: Client/Gui/Html rozdělit na Html a Document.


ÚVAHA: Několikrát jsem narazil na problém, že potomci mají stejnou
  property (třeba player), ale potřebují pracovat s client nebo server
  verzí.
- možná by shared classa mohla bejt generic s tím, že si potomci
  za T dosaděj příslušnej typ...
  (nemusel bych pak možná přetěžovat metody a tak).
TODO: Vyzkoušet to a pokud to bude fungovat, tak to použít.
- Vyzkoušel jsem to u Connection a zdá se, že to funguje.
[done]
TODO: Udělat to i u ostatních class




TODO: Možná bych měl spíš explicitně deklarovat, co se savuje a posílá,
  spíš než co se nesavuje a neposílá.
  (tzn. setovat saved=true místo saved=false).
- ono to navíc asi vyřeší i to, že server-side části nemůžou nic posílat
  (protože pro to není obraz na klientu), takže bych v nich musel
  všechno zakazovat. Když bude default 'false', tak v nich nemusím
  nic řešit (respektive budu jen povolovat savování).

TODO: Umožnit deserializaci do existující entity (overwrite mód),
  abych mohl v zone updatech prostě posílat zónu.

TODO: Projít zónu a všechno, co je do ní vloženo (Ship nejspíš) a zkontrolovat,
  co se má posílat na klienta.

TODO: Packet SetWaypoint se může jmenovat prostě jen Waypoint.
  Nebo WaypointChange, WaypointMove

TODO: Prozkoumat private (a možná protected) konstruktory.
- mělo by to fungovat tak, že class pak jde vyrobit pouze statickou
  factory metodou (která si samozřejmě vezme isntanci z ClassFactory).
- Hmm, to by pak mohlo fungovat tak, že všechny dynamické classy budou
  mít prostě metodu newInstance().
TODO: Pak je ještě jedna možnost - že by konstruktory fungovaly jako
  factory funkce (protože konstruktor v zásadě asi může vrátit co chce).
  - constructor by asi class factory passnul this, takže by ho mohla
    využít jako root prototyp, pokud by ho ještě neměla. Díky tomu by
    možná dokonce vůbec nebyla potřeba registrace.
NOTE: Pokud by se instance vyráběly konstruktorem, mohl bych zrušit
  zone.init() (přesunout to do konstruktoru).

ÚVAHA: Psát si vyráběcí funkci na každou blbost je asi zbytečná spousta
  kódu.
TODO: Assets.newXYAsset() předělat na nějakou společnou funkci.
- Entities.newRootEntity(TextureAsset, name);
  (Name dát jako optional parametr. Nebo možná dokonce required).

TODO: Setovat playera do Client/Connection (v LoginResponse.process()).

TODO: LoginResponse neexistoval - přidělal jsem shared verzi, ale ještě
  bude potřeba client verze, kde se bude processit.


TODO: Projít všechny packety a při setování entity do packetu
  je přidávat do .entities v packetu.


TODO: Udělat to tak, že zóna v loadAssets projde do sebe vnořené entity
  a ty projdou svoje assety.

Ok, takže jinak.
TODO: 1) Dočasně to hacknout, abych při přidání lodě do zóny nemusel
  řešit assety (ať můžu vyzkoušet savování zóny s contentem).
- HACKnuto v Shared/Zone.addShip().
[done]
TODO: Nakonec zase odhackovat.

TODO: Posílat account na klient
- asi ho dát do Connection (ať je to stejně jako na serveru).

TODO: Nakonec zase rozchodit lítání do původního stavu.


TODO: Výhledově pořešit savování/loadování pozice a rotace lodě.
  (pokud se savují accessory, tak by to šlo vytahovat z physicsBody getterem).

TODO: Výhledově zvážit, jestli místo prototypeId nemít rovnou referenci
  na prototyp.
- asi by bylo trochu míň přehledný save fily (i když ne nějak závratně),
  ale líp by se s tím nejspíš pracovalo.
Na druhou stranu na prototyp se nejspíš dostanu přes standardní prototype
  chain, takže asi nepotřebuju extra referenci.
  (můžu na to udělat metodu getPrototype()).


Problém: Nemůžu přidávat ship do zóny, dokud nemá initnutý assety
- hmm, jenže v tý době ještě nejsou nasetovaný.
  Takže možná initovat každej aset ve chvíli, kdy ho do zóny setnu?
  - jasně, ve skutečnosti musím přidávat assety do zóny, když přidávám
    něco, co je vyžaduje :-)
TODO: Při přidávání lodi do zóny přidat do zóny assety vyžadované lodí.

Assets se mi v zóně nesavujou, protože nejsou setnuté do instance,
  ale do prototypu.
  - savovat se každopádně assets maj, byť teda trochu jinak.
TODO: Zrušit assets z prototypu Zóny a nasetovat je do savu test zóny.

TODO: vyrobit do zóny ship
  (asi taky jednorázově)

TODO: savnout zónu i s lodí (celé contents) do jednoho souboru.

TODO: implementovat serializaci/deserializaci entities v packetu.

TODO: posílat loď jako součást packetu (EnterFlightResponse).
  - upravit kód, aby se data lodi četla přímo

TODO: Až se budou posílat entity v packetech, tak pořešit
  posílání properties v zóně (tuším, že tilemapy a tak se zatím
  předávají přes statickou property nebo tak nějak).

-----------------------

Logovací procedura
1) akceptnutí connection (vytvoří se Connection).
2) klient pošle LoginRequest (login, heslo)
   - jakmile player zadá login a heslo, ale můžu to poslat i hned
     po připojení (jako simulaci toho, že má player savnutý private key,
     nebo tak něco).
3) Loadne nebo vyrobí se account (pokud je login ok), pošle se na
   klienta (LoginResponse).
   - stav se switchne asi do lobby nebo tak (charselect už nebude).
     Teď to asi můžu házet rovnou do flightu.


TODO: Vyrábět testovací ship jako novou entitu.
- zatím asi v každém startu s novým idčkem
- časem ji savovat a loadovat.


-----------------------

TODO:
1) Zkusit předělat Classes na Object.create()
   - funguje
2) Implementovat Entity.
3) Implementovat Entities (nebo to sloučit s Classes)
4) .entities do Packetu.
5) Posílání entities na klienta
6) Savování/loadování entitit
7) Savování/loadování celé zóny do jednoho souboru.

IDEA: Do packetů dát .contents, nebo možná .entities a přetížit
  serializaci/deserializaci tak, že všechny .entities projde
  a automaticky serializuje/deserializuje (podobně jako .contents
  u ContainerEntity).
- packet při tom může mít na tyhle entity ještě extra odkazy, ty
  se pak serializujou jako reference (a tudíž se při deserializaci
  automaticky obnověj).

TODO: Že bych nakonec všechny dynamické classy vyráběl přes Object.create()
  místo přes new?
- znamenalo by to, že při registraci classy by se nesavoval konstruktor, ale
  rovnou instance - a z ní by se pak dělali potomci přes Object.create().
Výhodu by to mělo, že by bylo průlhlednější (ne)volání konstruktoru.
  Při vyrábění té prototypové instance by se konstruktor normálně volal
  (což se teď neděje, když volám new na uložený konstruktor), protože by
  ho zavolal ten, kdo by prototypovou instanci registroval.
    A při factory create už by se samozřejmě konstruktor nevolal.

IMPORTANT: Určitě neřešit unikátnost jmen v entitách, tím jsem si v BNext
  pekelně zkomplikoval už tak dost složitej kód.
- entity prostě mají name a nějaký externí přidělovač zajistí, že budou
  unikátní (tzn. nejdřív si řeknu o jméno a až pak pod ním vyrobím entitu).

-----------------------

TODO: Tak přece jen budu muset ještě hrabat do arrive()
- při kliku kousek od lodi se mi občas točí jak čamrda
  (při krátké vzdálenosti od cíle bych neměl updatovat direction waypointu)
- asi bych měl přece jen povolit přetáčení, tzn. směr ne přímo k waypointu,
  ale ke steering force.
  - a asi tak, že to lineárně interpoluju podle vzdálenosti, takže
    když budu hodně blízko cíli, tak budu vždycky směřovat k němu a když dál,
    tak někde mezi směr na cíl a na desired force.
    (interpolaci nejspíš vůči braking distance).

------------------------------------------------------------

TODO: Zkontrolovat zvuk exhaustů
- nevím, jestli mi funguje hlasitost
- a asi by se neměla přehrávat celá smyčka, ale jen část.

TODO: Odhackovat Shared.Zone.getPlayerShip()
  (to asi budu řešit až když se budou posílat entity).

TODO: ShipVectors kreslí i kruhy a tak, asi by se to mělo jmenovat jinak
  (ShipDebugGraphics?)


-----

Zprovoznit entity
- Savovat/loadovat lodě z disku.
- Savovat/loadovat zónu z disku.
- Posílat v rámci packetů zónu/lodě místo ručně vytažených properties.
  (ZoneUpdate se asi bude muset pořád vyrábět ručně, uvidíme...)
- Udělat entity pro textury, zvuky, shapy a podobně
  - používat idčko entity jako idčko resourcu v Phaseru.




Upřesnění aktuálního cíle:
---------------------------
- 1 player ship, 1 enemy ship
- střelba railgunem a raketama
  - zvukové efekty
  - exploze při zásazích, exploze při zničení lodi
  - grafika a fyzika vraku
- basic interface (healthbar, skillbar, zobrazení cooldownu na rakety).
  (na to asi budu muset rozběhat windows a vůbec základy gui).
- detekce zásahů, detekce kolizí lodí. Basic počítání hpček.
(překážky, tedy obecně objekty ve scéně, na tohle nejsou potřeba)


TODO: V rámci EnterFlightRequest.sendResponse() posílat
  zónu (respektive to z ní, co player vidí. A hlavně seznam
  toho, co se má preloadnout).
  - zatím to dělat nebudu a budu číst data zóny natvrdo.

TODO: V Client/EnterFlightRequest.process() creatnout zónu z poslaných dat
  (zatím ji tam budu natvrdo vyrábět).


TODO: Pokud nebudou potřeba data tilemapy po načtení shapů, tak je
  nedržet (tj. dát to do dočasné proměnné).
  (tzn. Zone.tilemaps by asi mělo být dočasné a ne class property)
- shapy v paměti držet budu.

TODO: V EnterShip.fakeLoadFighter() setovat i ostatní physics properties.
  (ve Vehicle budou jen defaultní).


Obecně se mi nechce dělat classy pro jednotlivé typy lodí.
- různou funkčnost zařídím prostě tak, že do nich dám různé zbraňové systémy,
  každý se svou funkčností.
=> Jednotlivé lodě musej bejt instance s různě nastavenými vlastnostmi.
  - to v zásadě můžu udělat i v kódu, prostě udělám 4x new Ship() a nasetuju
    jim properties (efektivně to je totéž jako load entity z disku).
{tohle si tu nechám, ať vím, kam směřuju}



Far TODO:
----------
3) Dát něco do scény.
4) Vyhýbání (překážkám a jiným lodím).
7) Bullets (railgun a tak)
8) Rakety!
9) Lag simulátor a interpolace na clientu, aby se to netrhalo.
   - zatím asi až tak moc nespěchá, hratelný to bude i bez toho.

-----------------------------------------------------------------------


Prozatímní řešení client-server predikce
-----------------------------------------

TODO: Napsat "simulátor lagu"
  (random setInterval() před posláním packetu).

TODO: Na klienta posílat nejen aktuální stav, ale i rychlost a rotaci.
  Klient bude pokračovat v pohybu, kterej se od serveru dozvěděl.
  - resetne se to v okamžiku nového příchozího packetu
    (možná postupná interpolace pozice?)
  - predikce poběží jen určitej čas (třeba 100ms nebo tak nějak),
    pak se pohyb utlumí do nuly (aby se mi nestávalo to co v AOčku, tj.
    že při velkém lagu objekt ustřelí kamsi do dáli. Zastavit ho je mnohem
    lepší).

-----------------------------------------------------------------------


Odložené TODO:
---------------

TODO: Kód Account.save() by asi měl bejt někde jinde (obecněji).
- asi by mohl volat Entity.save() nebo tak něco.
  (jde jen o save path).
(Na druhou stranu entity v zóně chci savovat do zóny, hmm...)

TODO: Po reloadu tabu se špatně zobrazuje pozice waypointu.
- asi ho budu muset posílat ze serveru spolu se scénou
  (tzn. s lodí).

TODO: Udělat classu wrapující fastbitvector.
TODO: Udlělat ji Serializable a vyhodit serializační hack ze Serializable.

TODO: Napsat serializaci/deserializaci PriorityQueue
  (a rovnou to opravit, protože to prakticky určitě nebude dobře).

TODO: Hmm, možná kdybych důsledně používal wrapper na bitvector a byl
  zděděnej ze Serializable, tak bych ho nemusel v Serializable
  řešit.

IDEA: U vehiclů je otázka, jak se budou savovat - když bude například
  pozice jen ve physicsBody, tak dokud loď body nemá, tak nemá jak pozici
  uložit. Navíc asi tak jako tak nebudu chtít savovat vnitřek b2Body.
- mohl bych to udělat tak, že vehicle vždycky bude mít PhysicsBody
  (což je moje classa) a v tom se budou savovat údaje jako pozice a podobně.
  - ha, tzn. by tam taky rovnou mohly být konstanty jako restitution a tak.
  PhysicsBody by pak mohlo a nemuselo mít b2Body.

TODO: Packety se serializují, takže bych neměl spoléhat na to, že se provede
  konstruktor. Navíc prázná pole a objekty se vůbec neposílají a spoléhá se,
  že jsou na druhé straně inicializované na nějakou defaultní hodnotu.
=> Asi bych měl ve všech packetech důsledně všem propertiesům dávat defaultní
  hodnoty.
=> A možná bych v Serializable objektech vůbec neměl používat konstruktor.
{obecně nevím, jak tohle ošetřit. Asi leda commentem na začátku souborů}
- jo a mohl bych tam asi opravdu zrušit konstruktory a setovat všechno
  dodatečně.

TODO: Zvážit, že by physics shapy byly entity (měly by unikátní idčko a tak).

TODO: Updatnout Tilemap.Data podle
  http://docs.mapeditor.org/en/stable/reference/tmx-map-format/
- respektive je tam i verze pro JSON.

TODO: Výhledově místo atlas animací používat tile animace vytvořené v Tiled
  editoru a číst je z dat tilemapy.

TODO: Časem udělat (pre)loadovací scénu.
- to pak znamená jinak loadovat pluginy, viz:
  https://github.com/photonstorm/phaser3-plugin-template


TODO: Možná by stálo za to transformaci souřadnic ještě upravit, aby [0, 0]
  bylo uprostřed obrazovky.
  (protože typicky budu chtít loď uprostřed obrazovky...)
  - i když, to možná bude lepší vyřešit kamerou.
{ Asi by to fakt chtělo - teď když resizuju hru, tak se objekty ve flight
 scéně držej vlevo nahoře, protože tam mají origin. Správně by asi mělo
 to, co je veprostřed obrazovky, zůstat uprostřed }


TODO: Zapínání a vypínání debug grafiky.
- flaga na zapnutí debug view by asi měla bejt na serveru (v accountu?)
      (bude přepínat, jestli se ve SceneUpdate bude nebo nebude
       posílat info na debug draw a když tam bude, tak ho klient
       prostě vykreslí
       - otázka ale je, co s vykreslováním bounding boxů, které
         se neposílají v každém paketu
         - asi se přepínání bude muset posílat taky).


TODO: SetWaypoint by se asi mělo posílat z něčeho jinýho než
  z Waypointu.
  - ani scéna by to neměla dělat. Možná engine?


TODO: Výhledově zrušit posílání ShipToScene
  z WebSocketServer.acceptConnection()
  a posílat ho až po nalogování playera do hry.


TODO: Výhledově líp pořešit keyboard handling. Psát extra handler na každou
  klávesu je dost overkill, navíc by se blbě psalo mapování keybindů.
  - asi to můžu udělat přes DOM eventy místo přes Phaser.


TODO: Klikání na objekty ve hře:
  You could do this using Query.point giving a mouse position and
  Composite.allBodies(engine.world). This will give you a list of
  bodies under the mouse.


TODO: Mrknout na:
  var game = new Phaser.Game("100%", "100%", Phaser.CANVAS, 'parent');
  ...
  game.scale.scaleMode = Phaser.ScaleManager.RESIZE
https://stackoverflow.com/questions/28227090/phaser-make-background-screen-width-instead-of-content-width


TODO: Vyzkoušet linear a angular drag (zapnout na physicsBody).
- to by teoreticky mělo způsobit, že síla bude muset působit pořád,
  abych udržel rychlost. Na druhou stranu...
Tohle ale až časem (možná vůbec). Současná varianta je celkem ok.


TODO: Asi budu potřebovat seekForward() a seekBackward()
(protože v současném módu se couvat moc nedá).
IDEA: Dozadu by se mohlo jet tak, že kliknu před loď a dragnu skrz loď za ni.
// IDEA: Se shiftem loď strafuje/couvá.

TODO: Odhackovat Client/Phaser/Sound.setVolume();

-----------------------------------------------------------------------

Výhledové TODO:
-----------------

TODO: Neposílat všem playerům updaty všech zón, stačí každému poslat
  update zóny, ve které se nachází.
  (Server/Game/updateClients())

TODO: Konstantu FPS ve Vehicle.ts hodit někam jinam (udělat jednu konstantu
  pro veškeré časování a tu všude používat).
- možná do Engine, pokud něco takovýho bude existovat.

TODO: Až bude Vehicle zděděné z Entity, zrušit Vehicle.getErrorIdString().

TODO: Hlasitost zvuku ostatních lidí snižovat se vzdáleností od pozice
  hráčovy lodě (nejspíš ne od pozice kamery).


TODO: Vyzkoušet dekompozici nekonvexních pologynů na konvexní:
  https://github.com/Louis-T/fernandez-polygon-decomposition
  https://github.com/schteppe/poly-decomp.js/
  - ten druhej asi neumí díry (a navíc má koordináty v poli), takže
    asi spíš ten první.
  - ideálně by se to mělo procesit offline, ale co už.
Spíš to asi odložím. Zatím můžu ručně editovat čiste konvexní polygony
  (ostatně to znamená rychlejší start.


TODO: Pořešit FileSystem.isEmpty() a FileSystem.isEmptySync()
- jsou v 'extfs', který jsem zrušil, nejsou ve 'fs-extra'


TODO: Použít https://letsencrypt.org/


TODO: Přidat comment k Serializable.deserialize(), jak se loadují
  entity (nějak přes Entities)


TODO: (Znovu) vyzkoušet ES6 moduly v browseru.
https://medium.com/dev-channel/es6-modules-in-chrome-canary-m60-ba588dfb8ab7
   <script type="module" src="module.js"></script>
- nefungují, protože browser vyžaduje v importech '.js' a typescript
  ho tam se zapnutým outputem "module": "es2015" nedává.
  viz https://github.com/Microsoft/TypeScript/issues/16577


TODO: Prostudovat avanced Typescript typy:
  https://levelup.gitconnected.com/advanced-typescript-types-with-examples-1d144e4eda9e
- nebo si to možná hodit do nějakého typescriptového howtu či manuálu.


TODO: Výhledově místo neposílání paketů do closed connection
  při disconnectu disablovat komplet herní keyboard processing.
  (viz Keyboard.sendPlayerInput())
  - component.hide() nestačí, to je vypne zobrazování.


Tslint
--------

TODO: Nepovedlo se mi rozplazit tslint extension, kterej by lintoval
  při psaní a zároveň nežral message reportnuté z buildu, které
  vyžadují type info.
    HINT: "problemMatcher": [ "$tslint5" ] je definovaný v tslint extensioně,
    takže když zapnu nějakou jinou, přestane fungovat matchování tslintových
    problémů při rebuildu.

TODO: Výhledově ještě jednou zkusit zapnout "no-unsafe-any" v tslintu
  (teď už na to nemám sílu).
TODO: Výhledově ještě jednou zkusit zapnout "strict-boolean-expressions"
  (teď už na to nemám sílu).
  - IDEA je v Serializable nepovolit v serialize/deserialize paramu
    typ any, ale nejspíš jen union některých typů.
    (bude to nejspíš znamenat, že už při vytváření paramů budu muset ošetřit,
      jestli tam neleze null nebo undefined, ale mělo by to pak dál
      ušetřit některé testy).

TODO: Tslint (co momentálně nejde v tslintu nastavit):
- zakázat newline na konci souboru
- Vyžadovat newline za if (), while() a podobně
  (teď se dá napsat na jednu řádku if (x === 0) { doSomething(); }).
- závorky za funkcí (volání i deklarace)
- jednořádkové if/for/do/while
  (mělo by to bejt tak, že když je za ifem jeden řádek a je to return nebo
   throw, tak {} být nemusí, jinak ano).
   - Hmm a vlastně ani to vždycky neplatí, protože když je za ifem
     throw Error(), kterej se nevejde na jeden řádek, tak je taky lepší
     ho uzávorkovat do {}.
- kontroly vyžadující type information
