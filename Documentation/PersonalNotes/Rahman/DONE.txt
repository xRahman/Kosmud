TODO: Destination marker by se výhledově asi měl renderovat v nějaké UI scéně
(aby nescaloval se zoomováním - i když, možná to bude ok...).
- zoomování vypadá ok.
[won't do]
TODO: Dát mu Z-order (menší než DEBUG ale větší než DEFAULT).
- správně by to mělo bejt:
  Překážky ve scéně
  - Waypointy
    - Ship
      - debug graphics
[done]
TODO: Dát lodi Z_ORDER_SHIPS
[done]
IMPORTANT: depth je potřeba nastavit kontejneru (v Ship). Celej obsah
  containeru má zřejmě jeho depth (+ uvnitř to ještě může bejt jinak).
[done]

TODO: Destination market by měl zmizet, když na cílové místo dorazím.
- to je asi zbytečný, loď ho prostě překreje.
[won't do]

TODO: Zvážit, jestli místo matter.js nepoužít radši Box2d
- zváženo a použito
[done]

TODO: Seekovat k destination markeru, ne k pozici myši.
- to asi znamená, posílat něco jinýho než MouseInput.
TODO: Vyrobit a posílat paket SetDestination
TODO: Zpracovávat SetDestination na serveru (místo MouseInputu).
[done]

TODO: Destination marker má zůstat viditelný i po releasu buttonu
[done]

TODO: Opravit detektování mouse-down.
- je to chyba v Phaseru
[done]

TODO: Smazat ./vscode/Build, až ho nebudu potřebovat.
[done]

TODO: Updatovat verzi tasks.json (budu to muset celý předělat...)
[done]

TODO: Vyhodit tslint option "no-unused-variables" a nahradit ji typescriptovou.
[done]

TODO: Vyzkoušet ještě lint options co chtějí type info.
- nepovedlo se mi rozběhat.
[done]

TODO: Zkusit pouštět tslint před tsc (sice v tslintu píšou,
  že se má pouštět až na zkompilovaný kód, ale třeba to není
  nutný).
  - pokud to bude ok, tak smazat příslušné commenty v tasks.json.
[done]

TODO: Přidat do build tasku mazání starého buildu.
[done]

TODO: Možná do build tasku hodit i lint celého kódu
  (ideálně s type information), ať se při rebuildu
  checkne všechno.
- pokud to rozběhnu, budu potřebovat -e na ignorování Box2d.
[done]

for those who use vscode with tslint as editor/lintinig you can add the
following to the vscode config:
// Configure glob patterns of file paths to exclude from linting
"tslint.exclude": "**/PATH_eg_TESTS/**/*.ts"
- musím opravit liter errory, abych zjistil, jestli to pak pustí tsc
  ve watch módu
[done]

TODO: Zvážit použití
  https://marketplace.visualstudio.com/items?itemName=eg2.ts-tslint
  (kvůlivá kontrolám, které vyžadují type information)
- nepovedlo se mi rozběhat
[done]

Warning: member-ordering - Bad member kind: public-before-private
Warning: The 'prefer-readonly' rule requires type information.
Warning: The 'promise-function-async' rule requires type information.
Warning: The 'await-promise' rule requires type information.
Warning: The 'no-floating-promises' rule requires type information.
Warning: The 'no-for-in-array' rule requires type information.
Warning: The 'no-inferred-empty-object-type' rule requires type information.
Warning: The 'no-unsafe-any' rule requires type information.
Warning: The 'restrict-plus-operands' rule requires type information.
Warning: The 'strict-boolean-expressions' rule requires type information.
Warning: The 'use-default-type-parameter' rule requires type information.
Warning: The 'deprecation' rule requires type information.
Warning: The 'match-default-export-name' rule requires type information.
Warning: The 'no-boolean-literal-compare' rule requires type information.
Warning: The 'no-unnecessary-type-assertion' rule requires type information.
Warning: The 'return-undefined' rule requires type information.
[Warn  - 6:31:20 PM] Warning: member-ordering - Bad member kind: public-before-private
[Warn  - 6:31:20 PM] Warning: The 'prefer-readonly' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'promise-function-async' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'await-promise' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'no-floating-promises' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'no-for-in-array' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'no-inferred-empty-object-type' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'no-unsafe-any' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'restrict-plus-operands' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'strict-boolean-expressions' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'use-default-type-parameter' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'deprecation' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'match-default-export-name' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'no-boolean-literal-compare' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'no-unnecessary-type-assertion' rule requires type information.
[Warn  - 6:31:20 PM] Warning: The 'return-undefined' rule requires type information.
[Warn  - 6:33:48 PM] vscode-tslint: Cannot read tslint configuration - 'Failed to load c:\Brutus\Kosmud\Src\tslint.json: Unexpected string in JSON at position 1515 in c:\Brutus\Kosmud\Src\tslint.json'
[done]

TODO: Upgradnout verzi typecriptu (a možná i tslintu)
[done]

TODO (Tslint) import { Cosi } from...
- pořád se mi to moc nezdá, ale asi jo, no
  (každopádně to dává smysl, je to v podsatě vytahování properties z objektů).
[done]

TODO: Prozkoumat (a ideálně použít):
  https://decembersoft.com/posts/say-goodbye-to-relative-paths-in-typescript-imports/
(nejspíš bude stačit baseurl
 - nebude, na serveru to nefunguje a je potřeba nastavit NODE_PATH)
[done]

TODO: Nastavit z-order pro Ship.gebugGraphics.
[done]

TODO: debug čáry by to asi chtělo dát do stejné grupy jako Ship
  (respektive Ship bude group a v ní bude ship_hull, debug_draw a tak),
  abych to rotoval a posouval najednou.
  - musí to být container, s grupou se nedá hejbat.
Scene.create()
{
  let group = this.add.group();
  let sprite = this.add.sprite(400, 300, 'phaser');
  
  group.add(sprite);
}
[done]

TODO: Vyrobit classu Phaser/Graphics,
  která bude umět kreslit čáry (a rovnou třeba vykreslist Geometry).
- je otázkla, jestli strokePoints() bude dělat to, co si myslím, ale
  třeba jo. Musím to vyzkoušet.
[done]

TODO: Zdědit FlightScene ze Scene a rozhodit mezi ně kód.
- DEPTH_COSI by asi měly bejt až ve FlightScene.
[done]

TODO: Steně tak asi rovnou vyrobit i FlightSceneContents
[done]


TODO: Zrušit přidávání shipy do scény při creatu scény.
[done]
TODO: Procesit ShipToScene na clientu (přidat ship do scény).
- možný problém: ShipToScene může klidně přijít před vytvořením
  scény (až se bude dýl loadovat, tak to dokonce bude celkem pravděpodobný).
[done]
Co s tím?
- buď si to nabufferovat a zpracovat to až ve chvíli, kdy bude scéna existovat.
  - tohle má výhodu v tom, že se mohou data poslat ještě v průběhu loadování.
- nebo po vytvoření scény poslat na server request.
TODO: Do Scene přidat buffer na přidávání věcí do scény.
  - dokud není scéna vytvořená, dávat ShipToScene do bufferu.
  - při vytvoření zpracovat ShipToScene z bufferu.
[done]

TODO: Na klientu nevyrábět ship rovnou, ale až když mi přijde
  packet s přidáním shipy do scény.
- player se teda asi bude na scénu přidávat rovnou při loginu
  (respektive spíš při EnterGame), ale přidávat se budou i jiný
  entity v průběhu, takže se to neztratí.
(Technicky vzato je to update scény, ale asi je lepší udělat novej typ
 packetu, než dělat komplikovaný vnitřní typy).
[done]

TODO: Mergnout SceneContents a Scene.
- to asi nebyl úplně nejlepší nápad. Teď zas musím ošetřovat každou property
  zvlášť. Mít to sdružený dohromady dávalo smysl.
Takže jinak: Nechat SceneContents, ale jen jako data container, nedávat do
  něj metody. Scéna prostě bude přistupovat přes this.contentns.camera apod.
[done]

TODO: Na serveru vyrábět a posílat paket ShipToScene
- otázka je kdy.
  - asi jako response na přihlášení klienta
    (nejspíš tam, co se bude výhledově posílat LoginRequest či co...
     - hmm, to asi nepůjde, páč komunikace po connectu začíná až tím,
       že user klikne na login button - pak se pošle LoginRequest)
     - takže asi zatím natvrdo do WebSocketServer.onNewConnection.
[done]

TODO: Je blbost posílat geometrii v každém tiku, takže:
- vyrobit packet "Přidávám playera na scénu"
  [done]
  - ShipToScene (přejmenovat to můžu vždycky)
- ten bude obsahovat:
  - geometrii.
    [done]
  - startovní pozici
    [done]
  - co vlastně přidávám
    (to zatím řešit nebudu)
[done]

TODO: Remove unecessary constructors from packet classes.
[done]

TODO: Udělat 'version' static.
[done]
TODO: Nepsat 'version' do paketů a nekontrolovat ji při deserializaci.
[done]

TODO: Možná by v Packetech přece jen nemusel bejt Vector, ale pouze
  {x, y}. Posílalo by se míň dat (a fungovat to asi bude taky)
  - otázka je, jak ten typ pojmenovat. XY? Coords?
  - a kam ho dát? Do Types? Do Packetu, protože se bude používat jen
    v packetech?
  - nebo prostě Packet.Vector...
[done]
- blbý je, že se to musí konvertit ručně, páč Vector se vleze do
  interfacu { x, y }...
Možná teda vyžadovat v constructoru packetů paramety (x: number, y: number)
  místo složeného typu (to zabrání předání a tedy assignování vectoru).
- err, to je taky naprd.
Takže jinak:
TODO: Vrátit do packetů vectory a upravit Serializační kód aby byl výsledek
  míň ukecanej.
[done]

TODO: metoda Vector.setLength();
- normalize
- scale
[done]

TODO: Použít classu Vector všude kde jsou koordináty
- místo GameEntity.Position
  [done]
- místo { x: number, y: number }
  [done]
- místo b2Vec2
[done]

TODO: Fix onBeforeUnload
- když je connection closed nebo closing, nezavírat ji.
[done]

TODO: Naučit Serializable savovat Vectory, aby Vector nemusel bejt zděděnej
  ze Serializable.
- netestováno
[done]

TODO: Vyrobit classu Vector (v Physics)
- Math ne, to by kolidovalo s javascriptovým Math.
[done]

TODO: Rozdělit PlayerInput na MouseInput a KeyboardInput
(nemusel bych dělat komplikovanej vnitřní typ).
[done]

TODO: Vymyslet, jak to udělat s typama
- určitě chci Position (nebo Vector?)
- otázka je, jestli to opravdu má bejt v GameEntity.
  Smysl to sice jakž takž dává, ale GameEntity není ničím zvláštní.
- Možná to hodit do Types?
- Nebo použít Vector (ať se s tím dá rovnou počítat?)
  - asi jo.
- Vector by asi měl bejt Serializable
[done]

TODO: Implementovat "Follow mouse position"
- posílat mouse_position na server
  [done]
- implementovat Steering.seek()
  [done]
- aplikovat steering force na ship
  [done]

Zatím mi ale stačí natvrdo jedno body pro ship, takže to prostě hacknu
  a uvidíme.
[done]

Aktuální TODO:
- umím vyrobit Box2D body (respektive PhysicsBody).
- někde vyrobit world
[done]
- v něm vyrobit body pro ship
[done]
- posílat na klienta pozici a rotaci shipy
[done]
- na klientovi to vykreslovat
  - transformovat souřadnice a rotace
    - tohle nějak záhadně není potřeba
      (nebo to možná dělám a ani o tom nevím. Asi správně zvolená znaménka
        u zatáčení na serveru).
  - setovat pozici a rotaci
[done]

TODO: Zatrhnout prohledávání TODO, DONE a CONTEMPLATION
- možná to rovnou přehodit někam do Users/Rahman
[done]

TODO: Jo a zatrhnout prohledávání Shared/Box2D
[done]


TODO: Dodělat cleanup a refactoring:
.
+Client root (KosmudClient.ts)
+Client/Class
+Client/Gui
+Client/Log
+Client/Net
Client/Phaser
+Client/Protocol
.
+Server root (KosmudServer.ts)
+Server/Class
+Server/FS
+Server/Game
+Server/Log
+Server/Net
Server/Physics
+Server/Protocol
.
+Shared/Utils
+Shared/Class
+Shared/Game
+Shared/Log
+Shared/Net
+Shared/Protocol
+Shared/Utils
.
(ve zbytku se vrtám)
[done]

TODO: Zavést classu GUI a v ní metodu init().
[done]

TODO: Opravit poslední commit.
[done]

TODO: PhaserEngine přejmenovat na DisplayEngine
  (nebo RenderEngine, nebo tak něco)
  - možná prostě Renderer?
- zatím přidán Renderer, který vlastní PhaserEngine. Časem to určitě
  budu refactorovat dál.
[done]

TODO: Zvážit, jestli v Game.start() spíš nepustit jen jeden timer
  a z něj pak volat všechno ostatní.
  (60 tiků za vteřinu je blbý číslo btw, bude se s tím špatně počítat...
   na druhou stranu je to rozumný strop fps).
- Každopádně to jsou entry-level funkce a je tam potřeba reportovat uncaught
  exceptiony [to je DONE].
[done]

TODO: Updatnout commenty v Application, Client a Server.
- všechno smazáno, takže asi done :-)
[done]

TODO: Přesunout FileUtils na Server (Client je nepotřebuje).
- mergnul jsem to do FileSystem.
[done]

TODO: Return values ve StringUtils
[done]

TODO: Rozdělit Utils na víc souborů.
- stringové fce
- souborové fce
  - ty by asi mohly jít do FS (už je tam isValidFileName()).
TODO: Zamyslet se, co se zbytkem Utils
  (mělo by to mít specifičtější pojmenování.)
- zatím to vypadá, že 'Utils' bude asi nejlepší...
- ...
[done]

TODO: Vyhodit z Utils ERROR a FATAL_ERROR (a vůbec ho celý projít).
- nahradit je exceptionama.
[done]

TODO: Asi sloučit classy Client a KosmudClient, Server a KosmudServer.
[done]

TODO: Potenciální problém - 'entities' asi budou muset bej v Application
  místo v Entities, protože se k nim musím dostat
  v Serializable.readEntityReference a v Serializable nejdou importnout
  Entities.
- Možná si metodu GetEntities() { return Entities.entities; } hodit někam
  do Utils.
(zatím to přeložit jde. Nechám si to tu, až budu zprovozňovat Entities)
TODO: Ještě jednou se zkusit obejít bez .entities v Application. Šlo
  by pak zrušit instancování klientu a serveru (dělá to Syslog, to stačí).
[done]

TODO: Rozdělit MessageType na Syslog.MessageType a zbytek.
  (mimo jiné se nebude muset všude se Syslogem importovat ještě MessageType).
- ten "zbytek" navíc zatím nejspíš nebudu potřebovat, takže prostě
  vyrobit Syslo.MessageType a MessageType zrušit.
[done]

TODO: Try-catchnout všechna volání serialize() a deserialize().
- ještě to zkontrolovat
[done]

TODO: Refactorovat Connectiony a WebSockety.
+/Shared/Net/PacketHandler.ts
+/Shared/Net/Socket.ts
+/Shared/Net/WebSocketEvent.ts
+/Server/Net/Connection.ts
+/Server/Net/Connections.ts
+/Server/Net/HttpsServer.ts
+/Server/Net/Socket.ts
+/Server/Net/WebSocketServer.ts
+/Client/Net/Connection.ts
+/Client/Net/Socket.ts
[done]

TODO: Obecněji pořešit posílání packetů do closed connection.
  (i když nejvíc to vadilo u "client closed browser tab" message,
   páč tam problikla exception těsně před zavřením tabu)
[done]

TODO: Pořešit Client/Connection.reportClosingBrowserTab()
- info je v commentu
[done]

[UNCAUGHT_EXCEPTION] Failed to send packet to websocket (/ [::ffff:195.113.180.1
95]). Reason: WebSocket is not open: readyState 2 (CLOSING) (this exception has
propagated to top-level function. It needs to be caught much deeper where the er
ror can be properly recovered from.)
    at ServerSocket.send (D:\svetlym\tmp\00\Brutus\Kosmud\Src\Server\Net\ServerS
ocket.ts:69:13)
    at Connection.send (D:\svetlym\tmp\00\Brutus\Kosmud\Src\Server\Net\Connectio
n.ts:184:17)
    at Function.broadcast (D:\svetlym\tmp\00\Brutus\Kosmud\Src\Server\Net\Connec
tions.ts:52:18)
    at Function.updateClients (D:\svetlym\tmp\00\Brutus\Kosmud\Src\Server\Game\G
ame.ts:67:19)
    at Timeout.start.setInterval [as _onTimeout] (D:\svetlym\tmp\00\Brutus\Kosmu
d\Src\Server\Game\Game.ts:37:20)
    at ontimeout (timers.js:425:11)
    at tryOnTimeout (timers.js:289:5)
    at listOnTimeout (timers.js:252:5)
    at Timer.processTimers (timers.js:212:10)
- zaprvé musím testovat, jestli je connection CLOSING
  (to nejspíš souvisí s testováním connection.isOpen()
   v Connections.broadcast)))
[done]
- zadruhé musím tyhle exceptiony někde odchytávat.
[done]

TODO: Client musí nějak ošetřit disconnect
  (aby pak neházel errory jako
   'Uncaught Error: Failed to send data to the server because the connection
    is closed')
- jsou tam alerty a exeptiony by mělo pořešit neposílání paketů do closed
  connection.
[done]

TODO: Event handlery v Keyboard jsou top-level fce, měly by asi volat
  Syslog.reportUncaughtException().
- done, ale výhledově to chce keyboard handling komplet přepsat.
[done]

TODO: Projít všechny výskyty send() a zajistit, že se testuje isOpen().
  A přidat taky exception handling. Connection.send() hází výjimky.
- v Keyboard() je to done.
[done]

TODO: send() a receiveData() by asi vůbec neměly catchovat exceptiony
  (respektive receiveData() možná jo, ta se volá interně z callbacku,
   ale send() volá někdo jinej a ten by asi měl exception dostat).
- Jasně. A onReceiveMessage() už pak reportí jen uncaught exception
  pro případ, že by ji někdo nezhandlil sám.
[done]

TODO: Pořešit rethrow v ServerSocket.send()
  (a asi i v ClientSocket)
[done]

TODO: Musí být connection.receiveData() public?
- jestli se to volá ze socketu, tak sloučením Socketu a Connection
  by callback vidě na private receiveData().
[done]

TODO: Asi bych to mohl udělat tak, že Connection zdědím z WebSocketu
- díky tomu to pořád bude separated code, ale nebudu muset řešit
  alokaci websocketu a budu mít protected přístup na receiveData().
[done]

TODO: Connections.broadcast() musí testovat, jestli jsou
  connectiony otevřené.
[done]

TODO: V ClientSocket (a nejspíš i ServerSocket) je pořád spousta ERROR()
  callů. Zkontrolovat, jestli to nemají být exceptiony.
[done]

TODO: ještě jednou mrknout na connection.send(packet), jestli by to nemělo
  bejt v PacketHandleru (musí se tomu dát serialize mode, takže asi ani
  nemůže, ale mohlo by to tam bejt aspoň abstract).
[done]

TODO: Přesunout connection instance na Clientu do Connection.
[done]

TODO: Posílání PlayerInputu prohnat fcí, která otestuje, jeslti je connection
  open.
[done]

TODO: Alerty o disconnectech (momentálně je to nejjednodušší).
[done]

TODO: Shared.Connection by se asi mělo jmenovat jinak.
[done]

TODO: Refactorovat WebSocketServer
[done]

TODO: Exceptiony ve FileSystem.
[done]

TODO: Vyzkoušet webpack
- pomalé, žere class names. Zatím nebrat
[done]

TODO: Použít Express (kvůli security)
[done]

TODO: HttpServer by se asi rovnou mohl jmenovat HttpsServer...
[done]

TODO: Refactorovat HttpServer
[done]

TODO: Zkontrolovat, že http server neservuje soubory mimo www-root.
- to zařídí express
[done]

TODO: Neservovat data, když je https server closed.
- hmm to asi nepůjde, když to teď dělá express.
- takže možná zrušit .open
(když to někdy bude potřeba, tak se to dá napsat dodatečně)
[done]

ERROR()
--------
.
Pokud nechám ERROR(), asi by se dalo použít tohle:
https://www.bennadel.com/blog/2828-creating-custom-error-objects-in-node-js-with-error-capturestacktrace.htm
.
  In the V8 engine, the stacktrace of an error is gathered using the
  Error.captureStackTrace() method:
  .
    Error.captureStackTrace( errorObject, localContextFunction )
  .
  This method injects a "stack" property into the first argument and,
  optionally, excludes the localContextFunction from the stacktrace.
  So, for example, if we were to generate the stacktrace inside of an
  error Factory function, we could tell V8 to exclude the factory function
  when generating the stack. This would reduce the noise of the error
  implementation and confine the stacktrace to meaningful information
  about the error context.
[done]

TODO: Otestovat reportování errorů.
[done]

TODO: Vyzkoušet ERROR() a REPORT() i na klientu.
[done]

TODO: Někde v kódu mám RERORT(new Error("test"));
- už snad ne
[done]

TODO: Reportování errorů a exceptionů je pořád divný.
- snad fixed
[done]

TODO: Odstranit testovací kód na ERROR() a REPORT() ze serveru a z klienta.
[done]

TODO: Když se stejně nakonec na zobrazení errorů volá Syslog,
  nebylo by lepší udělat polymorfní jen ten, místo Application?
  - respektive neprovolávat ty reporting funkce přes Application.
    (Tam to moc nepatří).
  - application je zatím taky singleton, možná to bude potřeba
[done]

TODO: Asi jsem rozbil tikání physics enginu a posílání updatů.
- to bylo nejspíš tím, že mi utekla uncaught exception. Client
  se tím zřejmě taky zastaví.
[done]

TODO: Updatnout commenty v ERROR (a vůbec v celém reportovacím kódu).
[done]

TODO: Z Utils oddělit ještě FileUtils.
[done]

TODO: FATAL_ERROR() by neměl bejt v Shared kódu (na klientu nedává smysl).
  A možná by šel vyhodit úplně.
- zrušen kompletně
[done]

TODO: Extra házení EXCEPTION_CAUGHT možná není úplně dobrý, protože tam
  není uvedeno, jaká exception byla chycena. Asi by to fakt měl bejt jeden
  message.
[done]

TODO: Mrknout ještě na REPORT() a logování catch message.
[done]

TODO: Testnout additional message u RERPORT().
[done]

TODO: Funkce ze StringUtils by se měly volat jak StringUtils.něco
  (ať je jasný, že to je z externího modulu).
[done]

TODO: Otestovat, jestli getTrimmedStackTrace() správně trimuje stack trace.
- otestováno při hození erroru.
- Klient to nepoužívá, hází místo toho exception.
[done]

TODO: Zvážit, jestli úplně nezrušit ERROR a nenechat jen syslog.
- Nakonec ne, viz třeba ClientSocket. Entry point funkce rovnou reportují,
  nemá smysl, aby házely exception.
[done]

TODO: Nahradit fs-promise něčím jiným
  npm WARN deprecated fs-promise@2.0.3: Use mz or fs-extra^3.0 with Promise Support
[done]

TODO: Everything is brutally slow now. Need to investigate what has happened.
  (fs-extra probably causes this).
- never mind, it works fine.
[done]

TODO: Serializable by nemělo nic vědět o entitách.
  - Entity by si měly přetížit metodu na serializaci/deserializaci properties.
- Nakonec jsem deserializování referencí na entity nechal v Serializable,
  aby šly házet reference na entity do non-entity class (a serializovat je
  jako reference).
[won't do]

Ok, seriózní TODO: Zprovoznit pohyb lodě tak, že na serveru to bude physics
  body v matter.js a na klienta se bude posílat aktuální pozice a rotace.
- importnout na serveru Matter.js
  [done]
- vytvořit testovací body pro ship
  [done]
- nasimulovat wsad (speed, rotation, position).
  (Zatím nic moc, ale tohle teď skipnu, s tím si bude lepší hrát s vizuální
   odezvou.)
- ukrást websockety z BrutusNext
[done]
- ukrást Serializable z BrutusNext
[done]
- posílat pozici a rotaci a zobrazovat to na klientu.
[done]
- posílat keyboard eventy (nejspíš už přeložené na herní akce?)
[done]

TODO: Velocity vector se musí updatovat spolu s rotací lodě.
- pamatovat si velocity (scalar value) starnou a velocity vector
  z ní počítat každej update().
[done]

TODO: Hodit funkce na práci s typy z Utils do Types.
[done]

TODO: Uklidit v Serializable public, protected atd.
[done]

TODO: Updatnout úvodní pokec v Serializable.
[done]

TODO: Vrátit se k jednoduchému modelu shared-only a data-only packetů
  a processPacket() udělat jako externí kód se switchem na className packetu.
- Zrušit Server/Protocol a Client/Protocol
- Zrušit IncomingPacket a OutgoingPacket.
- Classy XXXData přejmenovat na XXX.
- napsat processPacket() na serveru.
- napsat processPacket() na klientu.
[abandoned, reverted]

TODO: Vyhodit z gitu zkompilovaný kód.
[done]

TODO: Přejmenovat adresáře Client/js, Server/js, atd. (na CamelCase)
[done]

TODO: Objekty ve scéně by měly být v classe, která se celá
  nainstancuje ve Scene.create(), ať nemusím testovat, jestli to existuje.
  - problém je, že některé věci se vyrábí v preloadu...
    Preload s konkrétními sprity nesouvisí - z jedné textury se dá vyrobit
    milión lodí. 
[done]