-----------------------------------------------------------------------

Ovládání lodi (ship handling)
------------------------------

- ovládat loď čistě myší (asi follow při stisknutém myšítku, close při
  button-up) by mělo výhodu v tom, že by byla klávesnice volná na
  mačkání abilit.
- blbě by se ale strafovalo (leda si k tomu něco přimačknout).
  - třeba LMB = follow, RMB = strafe? (nebo jakkoliv si to user nabinduje)

- Pomalé otáčení nebudu asi muset moc řešit, protože vesmírné lodě se mohou
  kolem těžiště točit celkem svižně.
  - možná to bude přece jen chtít omezit kvůli fakt velkým lodím, ale
    nemusím to přehánět.
  "sluggishness" bude dána tím, že je ta věc pomalu akceleruje.

Ovládání klávesnicí:
- vypne se seek behavior.
- klávesy točí lodí
- 'W' akceleruje, 'S' decceleruje.

TODO: Brždění bez otočení lodě
  (dozadu by měla bejt síla o dost menší).
- čili budu mít vlastně dvě "approach" funkce:
  - "agresivní" s otočením lodě.
     - tady asi bude muset bejt "reakční vzdálenost" rovna součtu
       bezdné vzdálenosti (čukámek pryč) a vzálenosti, kterou loď uletí,
       než se celá otočí.
  - "pohodová" s bržděním.

Strafování:
- boční trysky s malým thrustem
- to by asi nemuselo vypínat steering.

TODO: Časem by to chtělo zohlednit možnost strafování ve steering funkcích.
- v zásadě asi nějak tak, že se síla složí s forward thrustu a strafe thrustu
  (což může být v součtu víc než čistě forward thrust).
- asi jen tam, kde to dává smysl. Tzn. ne když pronásleduju cíl, ale
jo když se chci vyhnout překážce.

-----------------------------------------------------------------------

Coordinates and measures
-------------------------

Vzdálenosti

Na klientu jsou měřítkem pixely, a to proto, že lodě a jiné objekty mají
  délku danou počtem pixelů (defaultní zobrazení je 1:1 vůči pixelům na
  obrazovce).

- i když teda je otázka, jestli by viewport (aspoň jeho delší rozměn) neměl
  zobrazovat všude stejně "prostoru" ve hře. Pak bych asi musel scénu
  scalovat tak, aby tohle vyšlo.
  - pořád je ale dálka lodě daná počtem pixelů a když se má na obrazovku vejít
    dejme tomu 10 100 pixelových lodí, tak šířka obrazovky je 1000 pixelů
    (které se pak mohou přescalovat třeba na 640 pixelů - nebo taky ne,
     na desktopu asi nechci, aby se mi okno scalovalo, když ho resiznu.
     Každopádně to zařídí nějaké scalování na klientu, základ jsou prostě
     pixely.)
TODO: Takže musím říct, kolik pixelů je jeden metr (nebo kolik metrů je pixel).
  A taky jestli 1 jednotka v Box2D je opravdu metr (nebo třeba kilák).

IDEA: 1 pixel = 1 metr,
  ale 1 Box2d unit = 1 kilometr
  (takže scale je 0.001).
Hmm. Ono nakonec 1:1 bude asi docela fajn.
- přinejhorším to můžu kdykoliv změnit.


Koordináty
- chci mít [0, 0] vlevo nahoře? Asi jo, bude lepší přemýšlet v normální
  souřadné soustavě a na klientu to flipnout až před vykreslením...
Transformaci zobrazení bude dělat až Phaser.

-----------------------------------------------------------------------

Kolize a zásahy
----------------

IDEA: Nemusím řešit rozdělení lodi na víc physics bodies, stačí spočítat
  úhel zásahu (zepředu, z boku, zezadu).
- Otázka je, co s ničením zbraní

-----------------------------------------------------------------------

GUI
-----

- class Gui by mohla v sobě mít instance (a vyrábět je, když už dělá init()).

- když to budou dělat přímo classy, tak to může v importu classy házet
  exceptiony. Což asi úplně nechci, protože ty není jak odchytit...
  
Canvas nemůže bejt komplet static, protože bude uvnitř CanvasWindow,
  které se bude vyrábět dynamicky v initu.

- classu Canvas nejspíš vůbec nepotřebuju.

- problém je, že když vyrábím PhaserEngine, tak mu dávám velikost canvasDivu.
  A ten v té době ještě nemusí existovat (určitě nebude, až to bude okno).
  => DisplayEngine (Renderer) se musí vyrábět až když mám příslušné okno.

Základní otázka tudíž je, kdo bude vlastnit Renderer a kdy se bude vyrábět.
- vyrábět se logicky bude poté, co se vyrobí okno.
- momentálně je to singleton. Což nemůže být, protože nemůže existovat
  od začátku.
- není to očividně Gui komponenta, takže by ho nemělo vlastnit Gui.
- možná by fakt měl vlastnit sám sebe (nebo to případně může bejt class
  Renderer, která bude obsahovat PhaserEngine.

Čili:
- zavolat Gui.init()
- zavolat Renderer.init()
  - ten si vyrobí PhaserEngine a passne mu údaje z CanvasWindow.

-----------------------------------------------------------------------

Disconnecty a reconnecty na klientu
------------------------------------

- zastavit simulaci
  (asi není nutný hned dealokovat scénu a tak).
  - momentálně se mi simulace zastaví prostě tím, že přestanou přicházet
    SceneUpdaty ze serveru.
    - takže to teď asi řešit nemusím.
- ukázat userovi okno s informací o disconnectu a reconnectu.
- zastavit keyboard eventy.
  (to by v zásadě mohlo zařídit to, že okno se scénou přestane bejt aktivní)

Problém je, že na tohle bych měl zresuscitovat okna a to je dost práce...
(Windows, stavy, udělat okno pro hru, udělat okno pro výpis
 disconnectu/reconnectu - asi ConsoleWindow).
 - to všechno mě bude odvádět od práce na vizuálu.
 - na druhou stranu teď to mám jakž takž v hlavě...

=> Chtělo by to asi nějaké provizorní řešení uička. Reconnecty se dají
   vypisovat do divu.

Ehm... Nastavit display = "none" zjevně nevypne keyboard eventy zaregistrované
  phaserem.
Asi bude fakt nejlepší to prostě do vypnuté connectiony neposílat.

-----------------------------------------------------------------------

Sockety a connectiony
----------------------

- getIpAddress(), getUrl() a getOrigin() na klientu nemá význam
  (server je jen jeden).


- Server.Connection (a tedy i Server.Socket) dostane webSocked
  od WebSocketServeru.
- Server.Connection (a tedy i Client.Socket) si ji vyrábí.
Může ji klient taky dostávat?
- V zásadě jo, .connect() by mohla bejt někde jinde
  (třeba Connection.connect()).
- potom ale zas bude connection žít jinak než socket (na klientu).
- vlastně by se i na klientu dala celá connection vyrobit až při connectu
  (byla by to static property Connection.connection);
Prozatím závěr: webSocket bude vyrábět někdo zvenku a Socket ho dostane
  jako parametr (to je fajn, nemusí se testovat, jestli existuje).

Hmm, že by dědičnost byla:
  Shared.Connection -> Shared.Socket -> Client.Socket -> Client.Connection
                                     -> Server.Socket -> Server.Connection
- je to poněkud nestandardní, ale možná to bude fungovat.

-----------------------------------------------------------------------

Logování
---------

Každej záznam v syslogu začíná tagem [MESSAGE_TYPE], kterej se bere
  z enumu MESSAGE_TYPE.
- Z toho plyne, že nikde jinde v kódu bych neměl mít explicitně [COSI], protože
  to pak vede ke zdvojeným tagům.


-----------------------------------------------------------------------

Error handling u socketů
-------------------------

Když socket není open, vracet true/false, nebo prostě jen házet exceptiony?
- true/false jde zapomenout ošetřit, neošetřená exception se o sebe přihlásí.
- Testovat uvnitř connection.send(), nebo dokonce socket.send(), jestli je
  socet open, už je pozdě - tu informaci potřebuje ten, kdo send() zavolal.
    Zjistit ji přes návratovou hodnotu send() by sice šlo, ale lepší je,
  zavolat před tím ručně isOpen() a podle toho se ošetřit.
=> send() bude čistě házet exceptiony.


-----------------------------------------------------------------------

Singletony (Game na serveru, Connection na clientu, etc.) by asi mohly
být komplet static classy, ať nemusím chodit přes Server.game...

-----------------------------------------------------------------------

TODO: Na clientu nejspíš prohodit proces connectění
- nejdřív se vytvoří web socket, pak new Connection(webSocket).
Otázka ale je, jestli to půjde dohromady s reconnectama.
- Tvoří se tam novej socket?
  Hmm, tvoří. Takže Connection může existovat bez socketu, tudíž
  socket musí být typu Něco | null...
  (Na serveru to tak asi není, zajímavé...)
  - leda bych tvořil celou novou Connection...

-----------------------------------------------------------------------

Úvahy k dědičnosti Ship classy
---------------------------------

Na rozdíl od packetů to asi zatím nemusím komplikovat,
  prostě můžu mít SharedShip (nebo ShipClass), v ní přímo property
  .position a zdědit z ní Client/Ship a Server/Ship.
- asi budu muset říct, které properties se nemají posílat.

Ono je vůbec otázka, jestli posílat celé classy. Myšlenka, že sdílená data
  jsou zabalená jako ShipData, je docela fajn. V tom případě by Ship
  vůbec nemusela být Serializable (respektive možná na Serveru kvůli savování).
    A taky bych nemusel řešit, aby /Server/Ship a Client/Ship měly stejného
  předka.

U packetů to ale jinak nepůjde, ty se posílají celé.

Na druhou stranu výhoda posílání celých class je, že pak funguje dědičnost.

No nic, kašlat na to, zatím dědičnost nepotřebuju.



-----------------------------------------------------------------------

Matter.js na serveru
---------------------

npm install --save @types/matter-js


Note that Matter.Runner is not yet supported in nodejs, so you'll need your own game loop.

      var Matter = require('matter-js/build/matter.js');

      var engine = Matter.Engine.create();

      var boxA = Matter.Bodies.rectangle(400, 200, 80, 80);
      var boxB = Matter.Bodies.rectangle(450, 50, 80, 80);
      var ground = Matter.Bodies.rectangle(400, 610, 810, 60, { isStatic: true });

      Matter.World.add(engine.world, [boxA, boxB, ground]);

      console.log('boxA', boxA.position);
      console.log('boxB', boxB.position);

      for (var i = 0; i < 100; i++) {
          Matter.Events.trigger(engine, 'tick', { timestamp: engine.timing.timestamp });
          Matter.Engine.update(engine, engine.timing.delta);
          Matter.Events.trigger(engine, 'afterTick', { timestamp: engine.timing.timestamp });
      }

      console.log('boxA', boxA.position);
      console.log('boxB', boxB.position);



-----------------------------------------------------------------------

Enumy vs stringové typy
------------------------

TODO: Zamyslet se, jestli by se nedaly enumy nahradit stringama
- na druhou stranu by se pak posílalo o dost víc dat po síti, což
  asi nechci. Takže v případě paketů zůstanu raději u enumů.
  (Na druhou stranu u stringových typů šlo nějak zajistit, že jsem
   vyčerpal všechny možnosti - to je fajn.)
- otázka je, jestli by nešlo tu kontrolu intelisensem dělat i u enumů
  (TODO: Nastudovat to a vyzkoušet).
  - zřejmě nešlo.

-----------------------------------------------------------------------

Packety
--------

TODO: Zvážit, jestli nějak nerozlišit incoming a outgoing packety
  (asi různé adresáře na klientu a na serveru).
Anser: Nepotřebuju víc adresářů, řeší to dědičnost.

  shared/packet
  client/incomingPacket
  client/outgoingPacket
  server/incomingPacket
  server/outgoingPacket

  nebo

  client/packet/in
  client/packet/out

  client/packet/incoming
  client/packet/outgoing

Respektive jinak: Možná to není otázka adresářů, ale dědičnosti.
  - outgoing packety například asi nepotřebují metodu process().
    Aha, jasně, na BNextu jsem to měl zděděné z Reuqest a Response.
    Ale Packet měl metodu process s error messagem v body, což
    asi není dobře - měl jsem zpracovávat Requesty a posílat Responsy.
  - možná rootovej Packet vůbec není potřeba.

Takže otázka zní: Pojmenovat ancestory Request a Response, nebo IncommingPacket
  a OutgointPacket?
  - incoming/outgoing mění význam podle toho, jestli jsem na serveru nebo
    na klientu. To by mohlo mást...
  - na druhou stranu třeba SceneUpdate není ani Request, ani Response. Na nic
    totiž neresponduje, server ho posílá automaticky.
- incoming/outgoing je asi dobrý v tom, že je jasný, že incoming má mít metodu
  process a outgoing ne.
- Response by asi šla zdědit z outgoingPacketu - hmm, vlastně nešla, protože
  na serveru je outgoing a na clientu incoming. To bude možná problém...

TODO: Upravit dědičnost packetů (nejspíš zrušit Packet a nahradit ho dvojicí
  IncomingPacket/OutgointPacket).
  - hmm, možná tady byl problém s křížovým děděním, Response/Request mají
    taky nějaké sdílené vlastnosti a nedají se jednoduše zdědit
    z Incoming/Outgoing packetu. Možná to vyřešit propertou:
    RegisterRequest by byl například zděděnej z OutgoingPacketu a měl property
    requestData: RegisterRequestData.

Hmm, ono to možná vůbec nepůjde.
  Pokud mám třeba SharedPlayerInput, v něm něco, co chci zdědit, a z toho
  zdědím /Client/PlayerInput a /Server/PlayerInput, tak na clientu
  je to outgoing packet a na serveru incomming.
- což jsem zas u toho, že by všecha sdílená data toho packetu musela být
  pověšená pod IncomingPacket/OutgoingPacket coby .data: PlayerInputData.

Je fakt, že když bych měl PlayerInputData, tak bych k tomu nemusel dělat
  client a server verzi (všechna data v packetu jsou shared).
  Na druhou stranu by mi ale nic neohlídalo, že v client i server verzi
  packetu mám property data: PlayerInputData - na to bych ty packety
  musel dědit z nějakého interfacu (což bych ale asi mohl).

Takže bych měl:
  /Shared/IncomingPacket
  /Shared/OutgoingPacket
  /Shared/PlayerInputData
  /Shared/PlayerInputInterface

  a k tomu:

  /Client/PlayerInput
    class PlayerInput extends OutgoingPacket implements PlayerInputInterface
    {
    }

  a na serveru obdobu.

- Problém to úplně neřeší, protože pořád můžu zapomenout napsat to
  'implements PlayerInputInterface' a tudíž mě nic neohlídá, ale
  asi je to lepší než nic...

Otázka je, jestli k něčemu vůbec potřebuju ty interfacy...
- asi je tady používám k neintuitivnímu účelu.

"Dědění" přes interfacy je naprd, protože v interfacu mohou být jen
  public properties.
- obejít to přes classu (zdědit z ní interface a ten pak implementovat) nejde,
  protože výsledná classa pak není potomkem zdrojové classy, takže nemůže
  mít z ní zdědění protected properties. Private by možná fungovaly, ale
  to zas nedává smysl (private se nedědí, so to speak).
Takže asi fakt jedině typescriptové mixiny, pokud chci nějakou formu
  vícenásobné dědičnosti.

IDEA: Můžu v zásadě říct, že všechny packety musí mít .data: PacketData.
- tím sice nezajistím, že SceneUpdate na Clientu a na Serveru bude mít
  stejné PacketData, ale aspoň něco...

Ještě zpět k otázce, jestli packety mají být dynamické classy.
- taky by mohla být prostě jen classa Packet a zpracování packetu by
  mělo switch...
    Pak by teda zas mělo být dynamické PacketData, protože to předhazuju
  switchem na zpracování, takže bych si asi moc nepomohlo...

Packety se komplikují tím, že je dělím na incoming a outgoing - přitom
  samy o sobě obsahují jen nějaká data. Jasně, logicky sice dává smysl
  metody na opracovávání těch dat dát do stejné classy, ale to stejně nedělám:
  data jsou v .data a opracovává je .process(), čili je vlastně čte externě.

IDEA: Packety by měly být čistě shared classy.
- díky tomu odpadne problém s pojmenováváním potomků na klientu a na serveru.
- a zjednoduší se práce.
Musí být samozřejmě Serializable a zaregistrované v Classes.
- ale jelikož budou jen shared, tak mohou být includnuté přímo z Classes.
Obslužný kód bude čistě na serveru a klientu.
- bude dostávat Packet jako parametr.
- asi bude muset obsahovat switch...
  - podle className?
  Abych mohl typescriptem zajistit, že jsou všechny casy zpracované, tak bych
  musel mít union stringový typ (nebo možná ne nutně stringový?)
  - Jenže kdo zajistí, že jsou nové packety přidané do toho typu?
    Asi nikdo, tudíž to nemá smysl a můžu rovnou udělat switch na class name.


-----------------------------------------------------------------------

Dilema s pojmeováváním class:
------------------------------

/Shared/SharedClass
/Client/Class
/ServerClass

nebo

/Shared/Class
/Client/ClientClass
/Server/ServerClass

- První varianta může být trochu matoucí při find-in-files (jsem na serveru
  nebo na klientu?)
- ale dává smysl při posílání mezi klientem a serverem
  (classy by se jmenují stejně, tudíž se vzájemně serializují/deserializují).
- Navíc SharedCosi zní jako "sdílená část čehosi", což je intuitivní význam.

RESULT: Zatím používám Class extends Shared.Class {}

-----------------------------------------------------------------------

TODO: Zvážit, jestli se na ERROR() nevyprdnout úplně.
- v browseru stejně nakonec skončím vyhozením výjimky.
- stejně chci nakonec logovat i exceptiony.
- throw Error() má správně stack a není třeba nic uřezávat.
Vlastně jediné použití ERRORU() co mě napadá, je, když chci něco
  jen zalogovat a pokračovat dál ve fci (throw je jako return);
ZÁVĚR: Zkusím co nejvíc používat throw Error().

-----------------------------------------------------------------------

Renderování backgroundu
------------------------

Nehybnost backgroundu by šla kromě scrollFactoru 0 vyřešit
ještě tím, že by se renderoval do samostatné scény. Viz sceneManager.
(Pokud budu mít ui, tak na to asi stejně dojde).


-----------------------------------------------------------------------

Úvaha o referencích na entity:

- reference by se získávaly přes:
    Entities.getReference(whoAsks, whatDoesHeWant, whereIsReferenceWritten);

- Entities by si zapamatovaly toho, kdo si o referenci žádá (do seznamu
  žadatelů) a odkazovanou entitu (do seznamu odkazovaných entit), případně
  by to mohly mít entity poznamenané u sebe (seznam koho referencují a kdo
  je referencuje).
    Když se entita maže, tak musí tyhle seznamy projít a vyhodit se z nich,
  plus odkazovaná entita zapíše do všech referencí na sebe 'null';

- getReference bude vracet typ Entity | null. Díky tomu typescript vynutí
  kontroly na null při každé manipulaci s referencí.

Downside: Pořád nebude zaručeno, že si někdo nesavne referenci přímo,
  místo aby si ji vzal přes Entities.getReference(). Tudíž je otázka,
  jestli celé tohle cvičení má smysl.
- na druhou stranu když si vzpomenu vzít si referenci správně, tak mě
  pak typescript donutí všude psát null checky, když s ní budu manipulovat.

Problém s implementací by mohl být, jak předat, kam se reference zapisuje.
  Když předám getReference(this.badPlayer), tak se předá hodnota, tj.
  nejspíš 'null' nebo co zrovna v té property bude. Musel bych předat
  getReference(this, 'badPlayer') - což je problém, protože nemám string
  s názvem proměnné.

- Předávání referencí by vyřešilo, kdyby entita nebyla pověšená přímo
  v property (třeba .ch), ale až v .ch.ref. Ta by navíc asi mohla bejt
  skrytá za Proxy, takže by se to používalo normálně. Když bych pak chtěl
  tuhle referenci vynulovat, tak bych zapsal ch.ref = null.

Otázka je, jestli tohle všechno má vůbec smysl. Zresetování properties
  mazané entity sice nezajistí kontrolu ze strany typescriptu (to by musely
  všechny properties všech entit být typu (Cosi | null)), abych vždycky musel
  kontrolovat, že nepřistupuju na neexistující property, ale vyhodí výjimku,
  takže se to v runtimu dozvím.
- fakt teda je, že kontrola už v compile timu je výrazně lepší - odhalí
  i případné chyby se vzácným výskytem.

-----------------------------------------------------------------------

Mixiny (vícenásobná dědičnost)
--------------------------------


TODO: Vyzkoušet npm/mixin
- asi nebrat, typescript si s tím nerozumí.

Typescriptové mixiny fungují tak, že je možné funkcí přidat properties
  na libovolnou classu - to by teoreticky mohlo fungovat taky, až na to, že
  ty přidávané properties nemohou mít vlastní strom dědičnosti, a že to má
  dost divnou syntaxi...

http://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/
- class MyClass extends mix(MyBaseClass).with(Mixin1, Mixin2) {  
  /* ... */
}

Tohle by mohlo být zajímavé:
(viz https://github.com/Microsoft/TypeScript/pull/13743#issuecomment-414547593)

// Helper code:
/// Odtud by se brala funkce Mixin()...

export type Constructor<T = {}> = new (...args: any[]) => T;

/* turns A | B | C into A & B & C */
type UnionToIntersection<U> =
	(U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never

/* merges constructor types - self explanitory */
type MergeConstructorTypes<T extends Array<Constructor<any>>> =
	UnionToIntersection<InstanceType<T[number]>>;

export function Mixin<T extends Array<Constructor<any>>>(constructors: T): Constructor<MergeConstructorTypes<T>> {
	const cls = class {
		state = {
		}
		constructor() {
			constructors.forEach((c: any) => {
				const oldState = this.state;
				c.apply(this);
				this.state = Object.assign({}, this.state, oldState);
			});
		}
	} as any;
	constructors.forEach((c: any) => {
		Object.assign(cls.prototype, c.prototype);
	});
	return cls as any;
}

/// And the implementation.....


export class FooMixin {
	state = {
		value: ""
	}
	getBlah() {
		return "Blah"
	}
}

export class BarMixin {
	state = {
		othervalue: "merge together"
	}
	getBar() {
		return "Bar"
	}
}

export class FooBar extends Mixin([FooMixin, BarMixin]) {
	constructor() {
		super();
		this.getBlah = this.getBlah.bind(this);
		this.getBar = this.getBar.bind(this);
	}

	test() {
		this.state.value  // here on the typings good :)
		this.state.othervalue // here on the typings good :) this proves the merge strategy for state
		this.getBar(); // here :)
		this.getBlah(); // here :)
	}
}

- Vypadá to moc hezky, ale nefunguje to, protože na constructoru se nedá
  zavolat apply ani call.
    Tzn. řádka:
      c.apply(this);
    hodí exception.

RESULT: Mixiny jsou clumsy, kód je pak složitej a nepřehlednej. Asi se raději
zkusím obejít bez vícenásobné dědičnosti.

-----------------------------------------------------------------------